{"version":3,"file":"358de1e214a20763821bfa900117e1d25569ede0-26dee432b27887a83cff.js","mappings":"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","sources":["webpack://react-components-docs/../node_modules/@sebgroup/frontend-tools/isEmpty/index.js","webpack://react-components-docs/../node_modules/@sebgroup/frontend-tools/isEmpty/isEmpty.js","webpack://react-components-docs/../node_modules/@sebgroup/frontend-tools/isValidDate/index.js","webpack://react-components-docs/../node_modules/@sebgroup/frontend-tools/isValidDate/isValidDate.js","webpack://react-components-docs/../lib/src/Checkbox/Checkbox.tsx","webpack://react-components-docs/../lib/src/Datepicker/formatters.ts","webpack://react-components-docs/../lib/src/Datepicker/Datepicker.tsx","webpack://react-components-docs/../lib/src/RadioButton/RadioGroup.tsx","webpack://react-components-docs/../lib/src/RadioButton/RadioButton.tsx","webpack://react-components-docs/../lib/src/Stepper/Stepper.tsx","webpack://react-components-docs/../lib/src/Textarea/Textarea.tsx","webpack://react-components-docs/../lib/src/hooks/useCombinedRef.ts","webpack://react-components-docs/../lib/src/hooks/useDynamicForm.tsx"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar isEmpty = require('./isEmpty.js');\n\nexports.isEmpty = isEmpty.isEmpty;","'use strict';\n\nrequire(\"core-js/modules/es.date.to-string.js\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n/**\r\n * Check if a string is empty\r\n * @param {any} value String variable to be checked\r\n * @returns {boolean} True if empty\r\n */\n\nfunction isEmpty(value) {\n  if (value === undefined || value === null) {\n    // undefined or null\n    return true;\n  } else if (value instanceof Date) {\n    // Date object behave different from normal objects\n    return false;\n  } else if (value instanceof Function) {\n    return false;\n  } else if (value instanceof Object && !(value instanceof Array)) {\n    // Object, not an array\n    return Object.keys(value).length < 1;\n  } else if (value.length < 1) {\n    // Array or string\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexports.isEmpty = isEmpty;","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar isValidDate = require('./isValidDate.js');\n\nexports.isValidDate = isValidDate.isValidDate;","'use strict';\n\nrequire(\"core-js/modules/es.date.to-string.js\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n/**\r\n * Is valid date: Checks if the date is valid\r\n * @returns {boolean} true if the date is a valid date and false if not\r\n * @param date\r\n */\n\nfunction isValidDate(date) {\n  return !!(date && date instanceof Date && !isNaN(date.getTime()));\n}\n\nexports.isValidDate = isValidDate;","import React from \"react\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator/FeedbackIndicator\";\nimport \"./checkbox.scss\";\n\nexport type CheckboxProps = JSX.IntrinsicElements[\"input\"] & {\n    /** Displays the checkbox inline */\n    inline?: boolean;\n    /** Div wrapper props */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    /** Indicator for error, warning or success */\n    indicator?: Indicator;\n};\n\nexport const Checkbox: React.FC<CheckboxProps> = React.forwardRef(({ inline, wrapperProps, indicator, children, ...props }: CheckboxProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n    const [id, setId] = React.useState<string>(props.id);\n\n    React.useEffect(() => setId(props.id || (children ? props.id || randomId(\"checkbox-\") : null)), [props.id, children]);\n\n    return (\n        <FeedbackIndicator {...indicator}>\n            <div {...wrapperProps} className={classnames(\"rc\", \"checkbox\", { inline }, wrapperProps?.className)}>\n                <div className={classnames(\"custom-control\", \"custom-checkbox\", { \"custom-control-inline\": inline })}>\n                    <input {...props} type=\"checkbox\" id={id} className={classnames(\"custom-control-input\", props.className)} ref={ref} />\n                    <label htmlFor={id} className=\"custom-control-label\">\n                        {children}\n                    </label>\n                </div>\n            </div>\n        </FeedbackIndicator>\n    );\n});\n","export function padNumber(value: number, isYear: boolean = false): string {\n    if (value != null && value != undefined && isNumber(value)) {\n        const minimumIntegerDigits: number = isYear ? 4 : 2;\n        return value.toLocaleString(\"en\", { minimumIntegerDigits, useGrouping: false });\n    } else {\n        return \"\";\n    }\n}\n\nexport function isNumber(...values: number[]): boolean {\n    return values.every((val) => !isNaN(val));\n}\n","import { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport React from \"react\";\nimport \"./datepicker.scss\";\nimport { padNumber } from \"./formatters\";\n\ninterface OverriddenNativeProps extends React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {\n    value: any;\n    min?: any;\n    max?: any;\n    onChange: any;\n}\n\nexport interface DatepickerProps extends OverriddenNativeProps {\n    /** the value of the datepicker as a Date object */\n    value: Date;\n    /** On Change handler with the latest Date value */\n    onChange: (value: Date) => void;\n    /** Property sets whether a datepicker is a month picker  */\n    monthPicker?: boolean;\n    /** Property sets whether SEB styled datepicker will be rendered despite the browser used */\n    forceCustom?: boolean;\n    /** Minimum range of date that can be selected */\n    min?: Date;\n    /** Maximum range of date that can be selected */\n    max?: Date;\n    /** Locale of datepicker */\n    localeCode?: string;\n    /** Div wrapper props. NOTE: customPicker ONLY! */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    /** Props for the select element of month picker. NOTE: customPicker ONLY! */\n    customPickerSelectProps?: JSX.IntrinsicElements[\"select\"];\n}\n\ninterface UnitNames {\n    month: string;\n    day: string;\n    year: string;\n}\n\ntype InputRenderType = \"custom\" | \"date\" | \"month\";\n\nconst CURRENT_YEAR: number = new Date().getFullYear();\nconst MAX_DAY: number = 31;\nconst MIN_DAY: number = 1;\nconst MAX_YEAR: number = CURRENT_YEAR + 200;\nconst MIN_YEAR: number = CURRENT_YEAR - 200;\nconst PAGE_STEP: number = 5;\nconst UNIT_NAMES: UnitNames = {\n    month: \"Month\",\n    day: \"Day\",\n    year: \"Year\",\n};\n\nexport const Datepicker: React.FunctionComponent<DatepickerProps> = React.forwardRef(\n    (\n        { monthPicker, forceCustom, className, value, min, max, disabled, onChange, localeCode = \"en\", wrapperProps, customPickerSelectProps, ...props }: DatepickerProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ): React.ReactElement<void> => {\n        const maxYearRange: number = React.useMemo(() => max?.getFullYear() || MAX_YEAR, []);\n        const minYearRange: number = React.useMemo(() => min?.getFullYear() || MIN_YEAR, []);\n        const [renderType, setRenderType] = React.useState<InputRenderType>(\"date\");\n\n        const isValidDate = React.useCallback((d: Date): boolean => {\n            return !!(d && d instanceof Date && !isNaN(d.getTime()));\n        }, []);\n\n        const getStringFromDate = React.useCallback(\n            (d: Date, monthPicker: boolean): string => {\n                if (isValidDate(d)) {\n                    const year: string = `0000${d.getFullYear()}`.substr(-4, 4);\n                    const month: string = `00${d.getMonth() + 1}`.substr(-2, 2);\n                    const day: string = `00${d.getDate()}`.substr(-2, 2);\n\n                    return `${year}-${month}-${day}`.substr(0, monthPicker ? 7 : 10) || \"\";\n                } else {\n                    return \"\";\n                }\n            },\n            [isValidDate]\n        );\n\n        const getInputRawValue = React.useCallback(\n            (value: Date, monthPicker: boolean): string => {\n                return getStringFromDate(value, monthPicker);\n            },\n            [getStringFromDate]\n        );\n\n        const isDateInRange = React.useCallback((d: Date, min: Date, max: Date): boolean => {\n            if (!min && !max) {\n                return true;\n            } else if (min && d >= min) {\n                if (!max || (max && d <= max)) {\n                    return true;\n                } else {\n                    return false;\n                }\n            } else if (max && d <= max) {\n                return !min || (min && d >= min);\n            } else {\n                return false;\n            }\n        }, []);\n\n        const onCustomDatepickerChange = React.useCallback(\n            (day: number, month: number, year: number) => {\n                day = monthPicker ? 1 : day;\n                const dateString: string = `${padNumber(year, true)}-${padNumber(month)}-${padNumber(day)}`;\n                const date: Date = new Date(dateString);\n                // as long as all custom input fields are not null and is valid date, fire onChange\n                if (!!day && !!month && !!year && isValidDate(date) && isDateInRange(date, min, max)) {\n                    onChange(date);\n                } else {\n                    onChange(null);\n                }\n            },\n            [isDateInRange, onChange, min, max, monthPicker]\n        );\n\n        const initCustomDay = React.useCallback(\n            (value: Date, monthPicker: boolean): number => {\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\n                if (!!inputRawValue) {\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(8, 2));\n                    return value;\n                }\n            },\n            [getInputRawValue]\n        );\n\n        const [customDay, setCustomDay] = React.useState<number>(initCustomDay(value, monthPicker));\n\n        const initCustomMonth = React.useCallback(\n            (value: Date, monthPicker: boolean): number => {\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\n                if (!!inputRawValue) {\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(5, 2));\n                    return value;\n                }\n            },\n            [getInputRawValue]\n        );\n\n        const [customMonth, setCustomMonth] = React.useState<number>(initCustomMonth(value, monthPicker));\n\n        const initCustomYear = React.useCallback(\n            (value: Date, monthPicker: boolean): number => {\n                const inputRawValue: string = getInputRawValue(value, monthPicker);\n                if (!!inputRawValue) {\n                    const value: number = monthPicker ? 1 : Number(inputRawValue.substr(0, 4));\n                    return value;\n                }\n            },\n            [getInputRawValue]\n        );\n\n        const [customYear, setCustomYear] = React.useState<number>(initCustomYear(value, monthPicker));\n\n        const changeCustomDay = React.useCallback(\n            (day: number) => {\n                setCustomDay(() => {\n                    onCustomDatepickerChange(day, customMonth, customYear);\n                    return day;\n                });\n            },\n            [customMonth, customYear, onCustomDatepickerChange]\n        );\n\n        const changeCustomMonth = React.useCallback(\n            (month: number) => {\n                setCustomMonth(() => {\n                    onCustomDatepickerChange(customDay, month, customYear);\n                    return month;\n                });\n            },\n            [customDay, customYear, onCustomDatepickerChange]\n        );\n\n        const changeCustomYear = React.useCallback(\n            (year: number) => {\n                setCustomYear(() => {\n                    onCustomDatepickerChange(customDay, customMonth, year);\n                    return year;\n                });\n            },\n            [customDay, customMonth, onCustomDatepickerChange]\n        );\n\n        const getEventValue = React.useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n            const value: number = Number(e.target?.value);\n            return Number.isNaN(value) ? null : value;\n        }, []);\n\n        const handleChangeCustomDay = React.useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>): void => {\n                if (!monthPicker) {\n                    const day: number = getEventValue(e);\n                    changeCustomDay(day);\n                }\n            },\n            [changeCustomDay]\n        );\n\n        const handleChangeCustomMonth = React.useCallback(\n            (e: React.ChangeEvent<HTMLSelectElement>): void => {\n                const month: number = getEventValue(e);\n                changeCustomMonth(month);\n            },\n            [changeCustomMonth]\n        );\n\n        const handleChangeCustomYear = React.useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>): void => {\n                const year: number = getEventValue(e);\n                changeCustomYear(year);\n            },\n            [changeCustomMonth]\n        );\n\n        const handleKeyDownCustomDay = React.useCallback(\n            (e: React.KeyboardEvent<HTMLInputElement>) => {\n                if (!hasModifierKey(e)) {\n                    let newCustomDay: number = null;\n\n                    switch (e.key) {\n                        case \"ArrowDown\":\n                            newCustomDay = customDay - 1;\n                            break;\n                        case \"ArrowUp\":\n                            newCustomDay = customDay + 1;\n                            break;\n                        case \"PageDown\":\n                            newCustomDay = customDay - PAGE_STEP;\n                            break;\n                        case \"PageUp\":\n                            newCustomDay = customDay + PAGE_STEP;\n                            break;\n                        case \"Home\":\n                            newCustomDay = MIN_DAY;\n                            break;\n                        case \"End\":\n                            newCustomDay = MAX_DAY;\n                            break;\n                    }\n\n                    if (newCustomDay !== null) {\n                        e.preventDefault();\n                        /**\n                         * Sanitize the custom day value. If the value is larger than the maximum day of 31,\n                         * it will be reduced down to the remainder of <custom day % 31> (32 % 31 = 1); if\n                         * the value is lesser than the minimum day of 1, it will be increment up to the\n                         * product of <custom day + 31> (-1 + 31 = 30). This handling ensures that the custom\n                         * day value will always be in the range of the maximum and minimum day allowed.\n                         */\n                        const sanitizedDay: number = newCustomDay > MAX_DAY ? newCustomDay % MAX_DAY : newCustomDay < MIN_DAY ? newCustomDay + MAX_DAY : newCustomDay;\n                        changeCustomDay(sanitizedDay);\n                    }\n                }\n            },\n            [customDay, changeCustomDay]\n        );\n\n        const handleKeyDownCustomYear = React.useCallback(\n            (e: React.KeyboardEvent<HTMLInputElement>) => {\n                if (!hasModifierKey(e)) {\n                    let newCustomYear: number = null;\n\n                    switch (e.key) {\n                        case \"ArrowDown\":\n                            newCustomYear = customYear - 1;\n                            break;\n                        case \"ArrowUp\":\n                            newCustomYear = customYear + 1;\n                            break;\n                        case \"PageDown\":\n                            newCustomYear = customYear - PAGE_STEP;\n                            break;\n                        case \"PageUp\":\n                            newCustomYear = customYear + PAGE_STEP;\n                            break;\n                        case \"Home\":\n                            newCustomYear = minYearRange;\n                            break;\n                        case \"End\":\n                            newCustomYear = maxYearRange;\n                            break;\n                    }\n\n                    if (newCustomYear !== null) {\n                        e.preventDefault();\n                        /**\n                         * Sanitize the custom year value so that they are within the max and min year range.\n                         */\n                        const sanitizedYear: number = newCustomYear > maxYearRange ? maxYearRange : newCustomYear < minYearRange ? minYearRange : newCustomYear;\n                        changeCustomYear(sanitizedYear);\n                    }\n                }\n            },\n            [customYear, maxYearRange, minYearRange, changeCustomYear]\n        );\n\n        const getRelativeTimeFormat = React.useCallback((code: string): any => {\n            if ((Intl as any)[\"RelativeTimeFormat\"]) {\n                try {\n                    const rtf: any = new (Intl as any).RelativeTimeFormat(code);\n                    if (rtf) {\n                        return rtf;\n                    }\n                } catch (error) {\n                    return null;\n                }\n            }\n            return null;\n        }, []);\n\n        const getLocaleOrDefault = React.useCallback((localeCode: string): Intl.DateTimeFormat => {\n            let locale: Intl.DateTimeFormat;\n            try {\n                locale = new Intl.DateTimeFormat(localeCode, { month: \"long\" });\n            } catch (error) {\n                console.warn(`Locale with code: ${localeCode} was not recognised. Using locale 'en' instead.`);\n                locale = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n            }\n            return locale;\n        }, []);\n\n        const monthNames: string[] = React.useMemo(() => {\n            const date: Date = new Date(2012, 0, 5);\n            const locale: Intl.DateTimeFormat = getLocaleOrDefault(localeCode);\n\n            const names: string[] = [UNIT_NAMES.month];\n            [...Array(12)].map((_, i) => {\n                date.setMonth(i);\n                names.push(locale.format(date));\n            });\n            return names;\n        }, [localeCode, getLocaleOrDefault]);\n\n        const customPickerOrder = React.useMemo(() => {\n            const date: Date = new Date(2012, 0, 5);\n            const rtf: any = getRelativeTimeFormat(localeCode);\n            let order: string[] = [\"day\", \"month\", \"year\"];\n            const locale: Intl.DateTimeFormat = getLocaleOrDefault(localeCode);\n\n            const localeDateString: string = locale.format(date);\n            order.sort((a, b) => {\n                const positions: { day: number; month: number; year: number } = {\n                    day: localeDateString?.search(/5/g) || 0,\n                    month: localeDateString?.search(/1/g) || 1,\n                    year: localeDateString?.search(/2012/g) || 2,\n                };\n                return positions[a] - positions[b];\n            });\n\n            order?.map((unit) => {\n                UNIT_NAMES[unit] =\n                    rtf\n                        ?.formatToParts(1, unit)\n                        ?.filter((x) => x.type === \"literal\")[1]\n                        ?.value?.trim() || unit;\n            });\n\n            return order;\n        }, [localeCode, getRelativeTimeFormat, getLocaleOrDefault]);\n\n        const supportsInputOfType = (type: \"date\" | \"month\"): boolean => {\n            if (typeof document !== \"undefined\") {\n                const input: HTMLInputElement = document.createElement(\"input\");\n                input.setAttribute(\"type\", type);\n\n                const notADateValue: string = \"not-a-date\";\n                input.setAttribute(\"value\", notADateValue);\n\n                return input.value !== notADateValue;\n            }\n\n            return false;\n        };\n\n        const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n            const { value: changeEventValue } = e.target;\n            const value: Date = new Date(changeEventValue);\n            if (isDateInRange(value, min, max)) {\n                onChange(value);\n                return;\n            }\n            onChange(null);\n        };\n\n        const renderCustomDatepicker = (value: Date, monthPicker: boolean, customPickerOrder: string[], unitNames: UnitNames, disabled: boolean, monthNames: string[]) => {\n            const order: string[] = monthPicker ? [...customPickerOrder.filter((x: string) => x !== \"day\")] : customPickerOrder;\n            const dateValueLabel: string = randomId(\"seb-datepicker-custom-value-\");\n            return (\n                <div\n                    {...wrapperProps}\n                    ref={ref}\n                    className={classnames(\"input-group\", \"seb-datepicker-custom\", wrapperProps?.className)}\n                    role=\"group\"\n                    aria-labelledby={`${wrapperProps?.[\"aria-labelledby\"] ? `${wrapperProps?.[\"aria-labelledby\"]} ` : \"\"}${dateValueLabel}`}\n                >\n                    <div id={dateValueLabel} className=\"sr-only\">\n                        {monthPicker ? \"\" : `${customDay} `}\n                        {monthNames[customMonth]}, {customYear}\n                    </div>\n                    {order?.map((unit: string, unitIndex: number) => {\n                        switch (unit) {\n                            case \"day\":\n                                return (\n                                    <input\n                                        {...props}\n                                        key={unitIndex}\n                                        className={classnames(\"form-control\", \"seb-datepicker-custom-day\", className)}\n                                        type=\"number\"\n                                        min={MIN_DAY}\n                                        max={MAX_DAY}\n                                        placeholder={unitNames.day}\n                                        disabled={disabled}\n                                        value={isDateInRange(value, min, max) ? customDay || \"\" : \"\"}\n                                        onChange={handleChangeCustomDay}\n                                        onKeyDown={handleKeyDownCustomDay}\n                                    />\n                                );\n\n                            case \"month\":\n                                return (\n                                    <select\n                                        {...customPickerSelectProps}\n                                        key={unitIndex}\n                                        className={classnames(\n                                            \"custom-select\",\n                                            \"seb-datepicker-custom-month\",\n                                            { \"rounded-left\": unitIndex === 0 },\n                                            { \"rounded-right\": unitIndex === customPickerOrder.length - 1 },\n                                            customPickerSelectProps?.className\n                                        )}\n                                        value={isDateInRange(value, min, max) ? customMonth || \"\" : \"\"}\n                                        disabled={disabled}\n                                        onChange={handleChangeCustomMonth}\n                                    >\n                                        {monthNames.map((month: string, i: number) => {\n                                            return (\n                                                <option key={i} disabled={disabled || i === 0} value={i}>\n                                                    {month}\n                                                </option>\n                                            );\n                                        })}\n                                    </select>\n                                );\n\n                            case \"year\":\n                                return (\n                                    <input\n                                        {...props}\n                                        key={unitIndex}\n                                        className={classnames(\"form-control\", \"seb-datepicker-custom-year\", className)}\n                                        type=\"number\"\n                                        min=\"1\"\n                                        placeholder={unitNames.year}\n                                        disabled={disabled}\n                                        value={isDateInRange(value, min, max) ? customYear || \"\" : \"\"}\n                                        onChange={handleChangeCustomYear}\n                                        onKeyDown={handleKeyDownCustomYear}\n                                    />\n                                );\n                            default:\n                                break;\n                        }\n                    })}\n                </div>\n            );\n        };\n\n        React.useEffect(() => {\n            setRenderType(() => {\n                if (forceCustom) {\n                    return \"custom\";\n                }\n                if (monthPicker && supportsInputOfType(\"month\")) {\n                    return \"month\";\n                }\n                if (supportsInputOfType(\"date\")) {\n                    return \"date\";\n                }\n                return \"custom\";\n            });\n        }, [forceCustom, monthPicker]);\n\n        if (renderType === \"month\") {\n            return (\n                <input\n                    {...props}\n                    ref={ref}\n                    type=\"month\"\n                    className={classnames(\"form-control\", \"seb-datepicker-native\", className)}\n                    min={getStringFromDate(min, monthPicker)}\n                    max={getStringFromDate(max, monthPicker)}\n                    value={isDateInRange(value, min, max) ? getInputRawValue(value, monthPicker) : \"\"}\n                    disabled={disabled}\n                    onChange={handleOnChange}\n                />\n            );\n        } else if (renderType === \"date\") {\n            return (\n                <input\n                    {...props}\n                    ref={ref}\n                    type=\"date\"\n                    className={classnames(\"form-control\", \"seb-datepicker-native\", className)}\n                    min={getStringFromDate(min, monthPicker)}\n                    max={getStringFromDate(max, monthPicker)}\n                    value={isDateInRange(value, min, max) ? getInputRawValue(value, monthPicker) : \"\"}\n                    disabled={disabled}\n                    onChange={handleOnChange}\n                />\n            );\n        } else {\n            return <>{renderCustomDatepicker(value, monthPicker, customPickerOrder, UNIT_NAMES, disabled, monthNames)}</>;\n        }\n    }\n);\n\n/**\n * Detect if a modifier key is pressed along with the current key event.\n *\n * @param {object} event - Keyboard event\n * @returns true if key pressed is combined with modifier key, false otherwise\n */\nfunction hasModifierKey({ altKey, ctrlKey, metaKey, shiftKey }: React.KeyboardEvent) {\n    return altKey || ctrlKey || metaKey || shiftKey;\n}\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport { RadioButtonProps } from \"./RadioButton\";\nimport \"./radio-group.scss\";\n\nexport type RadioGroupProps<T = React.ReactText> = JSX.IntrinsicElements[\"fieldset\"] & {\n    /** The name of the group */\n    name: string;\n    /** Form indicator */\n    indicator?: Indicator;\n    /** Disable the whole group */\n    disabled?: boolean;\n    /** The value of the group */\n    value?: T;\n    /** On change handler */\n    onChange?: React.ChangeEventHandler<HTMLInputElement>;\n    /** Element label */\n    label?: React.ReactNode;\n};\n/** A radio button allows a user to select a single item from a predefined list of options. Radio buttons are common to use in forms, i.e when you apply for a loan and need to enter \"Yes\" or \"No\". */\nexport const RadioGroup: React.FC<RadioGroupProps> = React.forwardRef(\n    ({ name, indicator, disabled, value, label, onChange, ...props }: RadioGroupProps, ref: React.ForwardedRef<HTMLFieldSetElement>) => (\n        <FeedbackIndicator {...indicator}>\n            <fieldset {...props} ref={ref} className={classnames(\"radio-group\", props.className)}>\n                {!!label && <legend>{label}</legend>}\n                {React.Children.map(props.children, (Child: React.ReactElement<RadioButtonProps>) =>\n                    React.isValidElement<React.FC<RadioButtonProps>>(Child)\n                        ? React.cloneElement<any>(Child, {\n                              checked: value === Child.props.value,\n                              disabled: disabled || Child.props.disabled,\n                              onChange: (e: React.ChangeEvent<HTMLInputElement>) => onChange(e),\n                          })\n                        : Child\n                )}\n            </fieldset>\n        </FeedbackIndicator>\n    )\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./radio-button.scss\";\n\nexport type RadioButtonProps<T = React.ReactText> = Omit<JSX.IntrinsicElements[\"input\"], \"value\"> & {\n    /** Radio button value */\n    value?: T;\n    indicator?: Indicator;\n    /** Props for the div wrapper around the radio input element */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n/** A radio button allows a user to select a single item from a predefined list of options. Radio buttons are common to use in forms, i.e when you apply for a loan and need to enter \"Yes\" or \"No\". */\nexport const RadioButton: React.FC<RadioButtonProps> = React.forwardRef(({ children, indicator, wrapperProps = {}, ...props }: RadioButtonProps, ref: React.ForwardedRef<HTMLInputElement>) => {\n    const [id, setId] = React.useState<string>(\"\");\n\n    React.useEffect(() => setId(props.id || randomId(\"radiobtn-\")), [props.id]);\n\n    return (\n        <FeedbackIndicator {...indicator}>\n            <div {...wrapperProps} className={classnames(\"rc radio-button\", wrapperProps.className)}>\n                <div className=\"rc custom-radio custom-control\">\n                    <input {...props} ref={ref} className={classnames(\"custom-control-input\", props.className)} type=\"radio\" id={id} />\n                    {children && (\n                        <label htmlFor={id} className=\"custom-control-label\">\n                            {children}\n                        </label>\n                    )}\n                </div>\n            </div>\n        </FeedbackIndicator>\n    );\n});\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./stepper.scss\";\n\nexport type StepperProps = JSX.IntrinsicElements[\"input\"] & {\n    /** Element label */\n    label?: string;\n    /** maximum value for the element */\n    max: number;\n    /** minimum value for the element */\n    min: number;\n    /** callback when element value is decreased */\n    onDecrease: (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMin?: boolean) => void;\n    /** callback when element value is increased */\n    onIncrease: (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMax?: boolean) => void;\n    /** Feedback indicator */\n    indicator?: Indicator;\n    /** Props for the wrapper element (div) */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    /** configuration for accessiblity texts */\n    accessibilityConfigs?: {\n        decrementText: string;\n        incrementText: string;\n        currentValueText: string;\n    };\n};\n\n/** A stepper makes it easier to input values that are in a narrow range */\nexport const Stepper: React.FC<StepperProps> = React.forwardRef(\n    (\n        {\n            label,\n            onDecrease,\n            onIncrease,\n            indicator,\n            wrapperProps = {},\n            accessibilityConfigs = { decrementText: \"Decrease by 1\", incrementText: \"Increase by 1\", currentValueText: \"Current value is \" },\n            ...props\n        }: StepperProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ) => {\n        const [id, setId] = React.useState<string>(\"\");\n        const labelId: string = randomId(\"stepper-label-\");\n\n        const isDecrementDisabled: boolean = props.disabled || props.value === props.min;\n\n        const onDecrement = (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMin: boolean = false) => {\n            return isDecrementDisabled ? null : onDecrease(event, isMin);\n        };\n\n        const isIncrementDisabled: boolean = props.disabled || props.value === props.max;\n\n        const onIncrement = (event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLDivElement>, isMax: boolean = false) => {\n            return isIncrementDisabled ? null : onIncrease(event, isMax);\n        };\n\n        const onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n            event.preventDefault();\n            switch (event.key) {\n                case \"ArrowDown\":\n                case \"ArrowLeft\":\n                    onDecrement(event);\n                    break;\n                case \"End\":\n                    onDecrement(event, true);\n                    break;\n                case \"ArrowUp\":\n                case \"ArrowRight\":\n                    onIncrement(event);\n                    break;\n                case \"Home\":\n                    onIncrement(event, true);\n                    break;\n            }\n        };\n\n        React.useEffect(() => {\n            setId(props.id ? props.id : randomId(\"stepper-\"));\n        }, [props.id]);\n\n        return (\n            <div {...wrapperProps} className={classnames(\"rc custom-stepper\", wrapperProps.className)}>\n                {label && (\n                    <label className=\"custom-label\" htmlFor={id} id={labelId}>\n                        {label}\n                    </label>\n                )}\n                <FeedbackIndicator {...indicator}>\n                    <div className={classnames(\"stepper-container\", { disabled: props.disabled })}>\n                        <button className={classnames(\"stepper-decrement\", { disabled: isDecrementDisabled })} onClick={onDecrement} tabIndex={-1} aria-label={accessibilityConfigs?.decrementText}>\n                            <span>&#8722;</span>\n                        </button>\n                        <div\n                            className=\"stepper-preview\"\n                            role=\"spinbutton\"\n                            tabIndex={0}\n                            onKeyDown={onKeyDown}\n                            aria-labelledby={labelId}\n                            aria-valuenow={props.value as number}\n                            aria-valuetext={`${accessibilityConfigs.currentValueText}${props.value}`}\n                            aria-valuemin={props.min}\n                            aria-valuemax={props.max}\n                        >\n                            {props.value}\n                        </div>\n                        <button className={classnames(\"stepper-increment\", { disabled: isIncrementDisabled })} onClick={onIncrement} tabIndex={-1} aria-label={accessibilityConfigs?.incrementText}>\n                            <span>&#43;</span>\n                        </button>\n                    </div>\n                </FeedbackIndicator>\n                <input {...props} ref={ref} id={id} type=\"number\" readOnly={true} className={classnames(\"stepper-input\", props.className)} />\n            </div>\n        );\n    }\n);\n","import React from \"react\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./textarea.scss\";\n\nexport type TextareaProps = JSX.IntrinsicElements[\"textarea\"] & {\n    /** Element label */\n    label?: string;\n    /** Property sets whether textarea is resizable */\n    resizable?: boolean;\n    /** Form indicator */\n    indicator?: Indicator;\n    /** Wrapper props (div) */\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n};\n/** Textarea is a component that allows user to add or edit text in multiline */\nexport const Textarea: React.FC<TextareaProps> = React.forwardRef(({ indicator, label, resizable, wrapperProps = {}, ...props }: TextareaProps, ref: React.ForwardedRef<HTMLTextAreaElement>) => {\n    const [id, setId] = React.useState<string>();\n\n    React.useEffect(() => setId(props.id ? props.id : label ? randomId(\"textarea-\") : null), [props.id, label]);\n\n    return (\n        <div {...wrapperProps} className={classnames(\"rc text-area input-field\", wrapperProps.className)}>\n            {label && <label htmlFor={id}>{label}</label>}\n            <FeedbackIndicator {...indicator}>\n                <textarea {...props} id={id} ref={ref} className={classnames(\"form-control\", { resizable }, props.className)} />\n            </FeedbackIndicator>\n        </div>\n    );\n});\n","import React from \"react\";\n\n/**\n * Allows you to use the ref as well as forward it to parent component to use\n * @param refs The refs to forward to. Usually the forwarded ref\n */\nexport function useCombinedRefs<T>(...refs: Array<React.LegacyRef<T> | React.RefObject<T>>): React.MutableRefObject<T> {\n    const targetRef = React.useRef<T>();\n\n    React.useEffect(() => {\n        refs.forEach((ref) => {\n            if (!ref) return;\n\n            if (typeof ref === \"function\") {\n                ref(targetRef.current);\n            } else {\n                (ref as any).current = targetRef.current;\n            }\n        });\n    }, [refs]);\n\n    return targetRef;\n}\n","import React, { useState, ReactNode, useCallback, useMemo } from \"react\";\n\nimport { Checkbox } from \"../Checkbox\";\nimport { Textbox } from \"../Textbox\";\nimport { Textarea } from \"../Textarea\";\nimport { Dropdown, getValueOfMultipleSelect } from \"../Dropdown\";\nimport { Datepicker } from \"../Datepicker\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport { Stepper } from \"../Stepper\";\nimport { RadioButton, RadioGroup } from \"../RadioButton\";\nimport { isEmpty } from \"@sebgroup/frontend-tools/isEmpty\";\nimport { isValidDate } from \"@sebgroup/frontend-tools/isValidDate\";\n\nexport type DynamicFormInternalStateValue = string | string[] | Date | boolean | number | null;\nexport interface DynamicFormItem {\n    key: string;\n    controlType: DynamicFormType;\n    initialValue?: DynamicFormInternalStateValue;\n    label?: string;\n    description?: string;\n    multi?: boolean;\n    min?: any;\n    max?: any;\n    placeholder?: string;\n    options?: Array<DynamicFormOption>;\n    initiallyHidden?: boolean;\n    formElementAdditionalProps?: {\n        [k: string]: any;\n    };\n    wrappingElement?: \"div\" | \"section\" | \"none\";\n    additionalProps?: {\n        [k: string]: any;\n    };\n}\n\nexport type DynamicFormType = \"Text\" | \"Textarea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Option\" | \"LabelOnly\" | \"Stepper\";\n\nexport interface DynamicFormSection {\n    key: string;\n    title?: string;\n    items?: Array<DynamicFormItem>;\n    wrappingElement?: \"div\" | \"section\" | \"none\";\n    additionalProps?: {\n        [k: string]: any;\n    };\n}\n\nexport interface DynamicFormOption<T = any> {\n    key: string;\n    value?: T;\n    label?: string;\n    description?: string;\n    additionalProps?: {\n        [k: string]: any;\n    };\n}\n\nexport type InputChange = React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement> | React.MouseEvent<HTMLButtonElement, MouseEvent> | Date | number;\nexport interface DynamicFormInternalStateSection {\n    [k: string]: DynamicFormInternalStateValue;\n}\nexport interface DynamicFormInternalState {\n    [k: string]: DynamicFormInternalStateSection;\n}\n\nexport interface DynamicFormIndicatorState {\n    [k: string]: {\n        [k: string]: Indicator;\n    };\n}\n\nexport interface DynamicFormVisibilityState {\n    [k: string]: {\n        [k: string]: boolean;\n    };\n}\nexport interface DynamicFormMetaData {\n    [k: string]: {\n        [k: string]: DynamicFormMetaDataItem;\n    };\n}\n\nexport interface DynamicFormMetaDataItem {\n    /** This field is currently visible (based on conditional rendering) */\n    isVisible: boolean;\n    /** this field has an indicator */\n    hasIndicator: boolean;\n    /** This field has a non empty, null, undefined or otherwise falsy value (based on its controlType) */\n    hasTruthyValue: boolean;\n}\n\ntype OnChangeFormSection = (section: DynamicFormSection) => OnChangeFormItem;\ntype OnChangeFormItem = (item: DynamicFormItem) => OnChangeInput;\ntype OnChangeInput = (e: InputChange) => void;\n\nexport type FormRenderFunction = () => JSX.Element;\nexport type SetDynamicFormState = React.Dispatch<React.SetStateAction<DynamicFormInternalState>>;\nexport interface FormInfo {\n    dirty: boolean;\n    hasIndicators: boolean;\n    isAllTruthy: boolean;\n}\n\nexport type PatchState = (section: string, key: string, value: DynamicFormInternalStateValue) => void;\nexport type SetIndicator = (section: string, key: string, indicator: Indicator) => void;\nexport type SetHidden = (section: string, key: string, hidden: boolean) => void;\n\nexport type UseDynamicForm = {\n    renderForm: FormRenderFunction;\n    state: DynamicFormInternalState;\n    patchState: PatchState;\n    setIndicator: SetIndicator;\n    setHidden: SetHidden;\n    meta: DynamicFormMetaData;\n    info: FormInfo;\n};\nexport function useDynamicForm(sections: DynamicFormSection[]): UseDynamicForm {\n    const initialState: DynamicFormInternalState = useMemo(() => {\n        const initialFormState: DynamicFormInternalState = {};\n        sections?.map((section: DynamicFormSection) => {\n            initialFormState[section?.key] = {};\n            section.items?.map((item) => {\n                const { key, initialValue: value, multi, controlType }: DynamicFormItem = item;\n                let initialValue: any;\n\n                switch (controlType) {\n                    case \"Dropdown\": {\n                        if (multi) {\n                            if (Array.isArray(value) && (value as any[]).every((x) => typeof x === \"string\")) {\n                                initialValue = value as string[];\n                            } else {\n                                initialValue = [];\n                            }\n                        } else {\n                            initialValue = typeof value === \"string\" ? value : \"\";\n                        }\n                        break;\n                    }\n                    case \"Checkbox\": {\n                        initialValue = !!value;\n                        break;\n                    }\n                    case \"Datepicker\": {\n                        if (typeof value == \"string\" || typeof value == \"number\") {\n                            initialValue = isValidDate(new Date(value)) ? new Date(value) : null;\n                        } else if (value instanceof Date) {\n                            initialValue = value as Date;\n                        } else {\n                            initialValue = null;\n                        }\n                        break;\n                    }\n                    case \"Stepper\": {\n                        if (typeof value !== \"number\" && Number.isInteger(Number(value))) {\n                            initialValue = Number(value);\n                        } else {\n                            initialValue = value;\n                        }\n                        break;\n                    }\n                    case \"Option\": {\n                        initialValue = Array.isArray(value) ? value : [];\n                        break;\n                    }\n                    case \"Radio\": {\n                        if (typeof value === \"string\" || typeof value === \"number\") {\n                            initialValue = value;\n                        } else {\n                            initialValue = \"\";\n                        }\n                        break;\n                    }\n                    default:\n                        initialValue = value || \"\";\n                        break;\n                }\n\n                (initialFormState[section?.key] as DynamicFormInternalStateSection)[key] = initialValue;\n            });\n        });\n\n        return initialFormState;\n    }, []);\n\n    const initialVisibility: DynamicFormVisibilityState = useMemo(() => {\n        const initialVisibilityState: DynamicFormVisibilityState = {};\n        sections?.map(({ key: sectionKey, items }: DynamicFormSection) => {\n            initialVisibilityState[sectionKey] = {};\n            items?.map(({ initiallyHidden, key }: DynamicFormItem) => {\n                initialVisibilityState[sectionKey][key] = !initiallyHidden;\n            });\n        });\n\n        return initialVisibilityState;\n    }, [initialState]);\n\n    const [state, setState] = useState<DynamicFormInternalState>(initialState);\n    const [indicators, setIndicators] = useState<DynamicFormIndicatorState>({});\n    const [visibility, setVisibility] = useState<DynamicFormVisibilityState>(initialVisibility);\n    const [dirty, setDirty] = useState<boolean>(false);\n\n    const onChange: OnChangeFormSection = useCallback<OnChangeFormSection>(\n        (section: DynamicFormSection) => (item: DynamicFormItem) => (e: InputChange) => {\n            !dirty && setDirty(true);\n            const sectionState: DynamicFormInternalStateSection = state && state.hasOwnProperty(section.key) ? state[section.key] : {};\n            const controlType: DynamicFormType = item?.controlType || \"Text\";\n            let newValue: DynamicFormInternalStateValue = null;\n\n            switch (controlType) {\n                case \"Text\":\n                case \"Textarea\":\n                    newValue = (e as React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>).target.value;\n                    break;\n                case \"Option\": {\n                    let newOptions: string[] = [...((sectionState[item.key] as string[]) || [])];\n                    const targetValue: string = (e as React.ChangeEvent<HTMLInputElement>).target.value;\n\n                    if (newOptions.find((e: string) => e === targetValue)) {\n                        newOptions = [...newOptions.filter((e: string) => e !== targetValue)];\n                    } else {\n                        newOptions.push(targetValue);\n                    }\n                    newValue = newOptions;\n                    break;\n                }\n                case \"Radio\": {\n                    const targetValue: string = (e as React.ChangeEvent<HTMLInputElement>).target.value;\n                    const targetOption: DynamicFormOption | undefined = item.options?.find((o) => o.value === targetValue);\n                    if (targetOption) {\n                        newValue = targetOption.value;\n                    }\n                    break;\n                }\n                case \"Checkbox\": {\n                    const targetValue: boolean = (e as React.ChangeEvent<HTMLInputElement>).target.checked;\n                    newValue = targetValue;\n                    break;\n                }\n                case \"Dropdown\": {\n                    const target = (e as React.ChangeEvent<HTMLSelectElement>).target;\n                    newValue = target.multiple ? getValueOfMultipleSelect(Array.from(target.options)) : target.value;\n                    break;\n                }\n\n                default: {\n                    newValue = e as any;\n                    break;\n                }\n            }\n\n            setState({\n                ...state,\n                [section.key]: {\n                    ...sectionState,\n                    [item.key]: newValue,\n                },\n            });\n        },\n        [state, dirty, setDirty]\n    );\n\n    const meta = useMemo(() => {\n        let newMeta: DynamicFormMetaData = {};\n\n        sections?.forEach(({ key: sectionKey, items }) => {\n            newMeta[sectionKey] = {};\n            items?.forEach(({ key, controlType }) => {\n                const itemState: DynamicFormInternalStateValue | undefined | null = state && state[sectionKey] && state[sectionKey][key];\n                const hasIndicator: boolean = !!(indicators && indicators[sectionKey] && !isEmpty(indicators[sectionKey][key]));\n                const isVisible: boolean = !!(visibility && visibility[sectionKey] && !!visibility[sectionKey][key]);\n                let hasTruthyValue: boolean;\n\n                switch (controlType) {\n                    case \"Datepicker\":\n                        hasTruthyValue = isValidDate(itemState as Date);\n                        break;\n                    case \"Dropdown\":\n                    case \"Radio\":\n                    case \"Option\":\n                    case \"Text\":\n                    case \"Textarea\":\n                        hasTruthyValue = !!(itemState as string | any[])?.length;\n                        break;\n                    case \"Checkbox\":\n                        hasTruthyValue = !!itemState;\n                        break;\n                    case \"Stepper\":\n                        hasTruthyValue = Number.isInteger(itemState);\n                        break;\n                    default:\n                        hasTruthyValue = null;\n                        break;\n                }\n\n                newMeta[sectionKey][key] = {\n                    hasIndicator,\n                    isVisible,\n                    hasTruthyValue,\n                };\n            });\n        });\n\n        return newMeta;\n    }, [state, visibility, indicators]);\n\n    const checkMetaDataIf = useCallback(\n        (method: \"some\" | \"every\", condition: keyof DynamicFormMetaDataItem) => {\n            return Object.values(meta)[method]((s: DynamicFormMetaData[string]) => Object.values(s)[method]((v: DynamicFormMetaDataItem) => v.isVisible && v[condition]));\n        },\n        [meta]\n    );\n\n    //** Does at least one of all the currently visible elements have a warning message */\n    const hasIndicators: boolean = useMemo(() => {\n        return checkMetaDataIf(\"some\", \"hasIndicator\");\n    }, [checkMetaDataIf]);\n\n    //** Does every currently visible form element have a truthy value */\n    const isAllTruthy: boolean = useMemo(() => {\n        return checkMetaDataIf(\"every\", \"hasTruthyValue\");\n    }, [checkMetaDataIf]);\n\n    const renderForm = useCallback(() => {\n        return <DynamicFormComponent sections={sections} indicators={indicators} state={state} onChange={onChange} visibility={visibility} />;\n    }, [onChange, visibility, indicators]);\n\n    const formInfo: FormInfo = useMemo(() => {\n        return { dirty, hasIndicators, isAllTruthy };\n    }, [dirty, hasIndicators, isAllTruthy]);\n\n    const patchState: PatchState = useCallback(\n        (section: string, key: string, value: DynamicFormInternalStateValue) => {\n            setState((existingState) => ({\n                ...existingState,\n                [section]: {\n                    ...(existingState[section] || {}),\n                    [key]: value,\n                },\n            }));\n        },\n        [setState]\n    );\n\n    const setIndicator: SetIndicator = useCallback(\n        (section: string, key: string, indicator: Indicator | null) => {\n            setIndicators((existingState) => ({\n                ...existingState,\n                [section]: {\n                    ...(existingState[section] || {}),\n                    [key]: indicator,\n                },\n            }));\n        },\n        [setIndicators]\n    );\n\n    const setHidden: SetHidden = useCallback(\n        (section: string, key: string, hidden: boolean) => {\n            const visible: boolean = !hidden;\n\n            setVisibility((existingState) => ({\n                ...existingState,\n                [section]: {\n                    ...(existingState[section] || {}),\n                    [key]: visible,\n                },\n            }));\n        },\n        [setVisibility]\n    );\n\n    return {\n        renderForm,\n        state,\n        patchState,\n        setIndicator,\n        setHidden,\n        meta,\n        info: formInfo,\n    };\n}\n\nconst DynamicFormComponent: React.FC<{\n    sections: DynamicFormSection[];\n    indicators: DynamicFormIndicatorState;\n    visibility: DynamicFormVisibilityState;\n    state: DynamicFormInternalState;\n    onChange: OnChangeFormSection;\n}> = (props) => {\n    return (\n        <>\n            {props.sections?.map((section, i) => (\n                <React.Fragment key={i}>\n                    {!!section?.title ? <h4 className=\"rc dynamic-form dynamic-form-section-header\">{section.title}</h4> : null}\n                    <DynamicFormSectionComponent\n                        key={i}\n                        section={section}\n                        indicators={!isEmpty(props.indicators) && !isEmpty(props.indicators[section.key]) ? props.indicators[section.key] : {}}\n                        visibility={!isEmpty(props.visibility) && !isEmpty(props.visibility[section.key]) ? props.visibility[section.key] : {}}\n                        onChange={props.onChange(section)}\n                        state={props.state && props.state.hasOwnProperty(section.key) ? props.state[section.key] : null}\n                    />\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n\nconst DynamicFormSectionComponent: React.FC<{\n    section: DynamicFormSection;\n    state: DynamicFormInternalStateSection;\n    indicators: { [k: string]: Indicator };\n    visibility: { [k: string]: boolean };\n    onChange: OnChangeFormItem;\n}> = (props) => {\n    const { wrappingElement = \"none\", additionalProps = {} } = props.section;\n\n    const getSections = (): JSX.Element[] =>\n        props.section?.items?.map((item, i) => {\n            if (!!props.visibility[item.key]) {\n                return (\n                    <DynamicFormItemComponent\n                        key={i}\n                        item={item}\n                        indicator={!isEmpty(props.indicators) && !isEmpty(props.indicators[item.key]) ? props.indicators[item.key] : null}\n                        onChange={props.onChange(item)}\n                        state={props.state ? (props.state as DynamicFormInternalStateSection)[item.key] : null}\n                    />\n                );\n            }\n        });\n\n    switch (wrappingElement) {\n        case \"div\":\n            return <div {...additionalProps}>{getSections()}</div>;\n        case \"section\":\n            return <section {...additionalProps}>{getSections()}</section>;\n\n        default:\n            return <>{getSections()}</>;\n    }\n};\n\nconst DynamicFormItemComponent: React.FC<{\n    item: DynamicFormItem;\n    state: DynamicFormInternalStateValue;\n    indicator: Indicator;\n    onChange: OnChangeInput;\n}> = (props) => {\n    const controlType: DynamicFormType = props.item?.controlType || \"Text\";\n    const commonProps: {\n        name: string;\n        value: any;\n        minLength: number;\n        maxLength: number;\n        placeholder: string;\n        onChange: (...args: any[]) => void;\n    } = {\n        name: props.item?.key || \"\",\n        value: props.state as any,\n        minLength: props.item?.min,\n        maxLength: props.item?.max,\n        placeholder: props.item?.placeholder,\n        onChange: props.onChange,\n    };\n\n    const { formElementAdditionalProps = {} }: DynamicFormItem = props.item;\n\n    let formItem: ReactNode;\n\n    const labelItem: ReactNode = props.item?.label ? <label className=\"rc dynamic-form dynamic-form-label m-0\">{props.item?.label}</label> : <></>;\n    const descriptionItem: ReactNode = props.item?.description ? <p className=\"rc dynamic-form dynamic-form-description text-muted m-0\">{props.item?.description}</p> : <></>;\n\n    const indicator: Indicator = React.useMemo(() => {\n        return !isEmpty(props.indicator) ? props.indicator : { type: \"none\", noBorder: true, message: \"\" };\n    }, [props.indicator]);\n\n    switch (controlType) {\n        case \"Textarea\": {\n            const { value = \"\", ...rest } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <Textarea {...rest} value={value} indicator={indicator} {...formElementAdditionalProps} />\n                </>\n            );\n            break;\n        }\n        case \"Text\": {\n            const { value = \"\", ...rest } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <Textbox {...rest} value={value} indicator={indicator} {...formElementAdditionalProps} />\n                </>\n            );\n            break;\n        }\n\n        case \"Radio\": {\n            const { name, onChange, value } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <FeedbackIndicator {...indicator}>\n                        <RadioGroup {...{ name, onChange, value }} {...formElementAdditionalProps} className={`mt-0 ${formElementAdditionalProps?.className || \"\"}`}>\n                            {props.item?.options?.map((option: DynamicFormOption, i) => (\n                                <RadioButton key={i} value={option?.value} {...(option?.additionalProps || {})}>\n                                    {option?.label}\n                                    {option?.description && <p className=\"text-muted m-0\">{option?.description}</p>}\n                                </RadioButton>\n                            ))}\n                        </RadioGroup>\n                    </FeedbackIndicator>\n                </>\n            );\n            break;\n        }\n\n        case \"Dropdown\": {\n            const { name, onChange, placeholder, value } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <Dropdown {...{ name, onChange, placeholder, value }} indicator={indicator} multiple={props.item?.multi} {...formElementAdditionalProps}>\n                        {props.item?.options?.map((option: DynamicFormOption, i) => (\n                            <option key={i} value={option?.value} {...(option?.additionalProps || {})}>\n                                {option?.label}\n                            </option>\n                        ))}\n                    </Dropdown>\n                </>\n            );\n            break;\n        }\n\n        case \"Checkbox\": {\n            const { name, onChange, value } = commonProps;\n            formItem = (\n                <Checkbox {...{ name, onChange }} indicator={indicator} checked={!!value} {...formElementAdditionalProps}>\n                    {props.item?.label}\n                    {descriptionItem}\n                </Checkbox>\n            );\n            break;\n        }\n\n        case \"Datepicker\": {\n            const { onChange, name, value } = commonProps;\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <FeedbackIndicator {...indicator}>\n                        <Datepicker {...{ value, onChange, name }} min={props.item?.min} max={props.item?.max} {...formElementAdditionalProps} />\n                    </FeedbackIndicator>\n                </>\n            );\n            break;\n        }\n\n        case \"Stepper\": {\n            const { value = 0 } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <Stepper\n                        value={value}\n                        indicator={indicator}\n                        min={props.item?.min || 0}\n                        max={props.item?.max || 100}\n                        onIncrease={() => props.onChange(value + 1)}\n                        onDecrease={() => props.onChange(value - 1)}\n                        {...formElementAdditionalProps}\n                    />\n                </>\n            );\n            break;\n        }\n\n        case \"Option\": {\n            const { value } = commonProps;\n\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                    <FeedbackIndicator {...indicator}>\n                        <div className=\"d-flex flex-wrap\" role=\"group\" {...formElementAdditionalProps}>\n                            {props.item?.options?.map((option: DynamicFormOption, i) => {\n                                const active: boolean = !!(value as string[])?.find((e: string) => option.value === e);\n                                return (\n                                    <button\n                                        key={i}\n                                        onClick={props.onChange}\n                                        type=\"button\"\n                                        id={option.key}\n                                        name={props.item?.key}\n                                        className={`btn btn-sm mr-1 mb-1 btn-outline-primary${active ? \" active\" : \"\"}`}\n                                        value={option.value}\n                                        {...(option?.additionalProps || {})}\n                                    >\n                                        {option?.label}\n                                    </button>\n                                );\n                            })}\n                        </div>\n                    </FeedbackIndicator>\n                </>\n            );\n            break;\n        }\n\n        // used for LabelOnly and anything else\n        default: {\n            formItem = (\n                <>\n                    {labelItem}\n                    {descriptionItem}\n                </>\n            );\n            break;\n        }\n    }\n\n    const { wrappingElement = \"none\", additionalProps = {} } = props.item;\n\n    switch (wrappingElement) {\n        case \"div\":\n            return <div {...additionalProps}>{formItem}</div>;\n        case \"section\":\n            return <section {...additionalProps}>{formItem}</section>;\n\n        default:\n            return <>{formItem}</>;\n    }\n};\n"],"names":["isEmpty","exports","Object","defineProperty","value","Date","Function","Array","keys","length","isValidDate","date","isNaN","getTime","Checkbox","React","ref","inline","wrapperProps","indicator","children","props","id","setId","randomId","className","classnames","type","htmlFor","padNumber","isYear","undefined","values","every","val","isNumber","minimumIntegerDigits","toLocaleString","useGrouping","CURRENT_YEAR","getFullYear","MAX_YEAR","MIN_YEAR","UNIT_NAMES","month","day","year","Datepicker","monthPicker","forceCustom","min","max","disabled","onChange","localeCode","customPickerSelectProps","maxYearRange","minYearRange","renderType","setRenderType","d","getStringFromDate","substr","getMonth","getDate","getInputRawValue","isDateInRange","onCustomDatepickerChange","dateString","initCustomDay","inputRawValue","Number","customDay","setCustomDay","initCustomMonth","customMonth","setCustomMonth","initCustomYear","customYear","setCustomYear","changeCustomDay","changeCustomMonth","changeCustomYear","getEventValue","e","target","handleChangeCustomDay","handleChangeCustomMonth","handleChangeCustomYear","handleKeyDownCustomDay","hasModifierKey","newCustomDay","key","preventDefault","handleKeyDownCustomYear","newCustomYear","getRelativeTimeFormat","code","Intl","rtf","RelativeTimeFormat","error","getLocaleOrDefault","locale","DateTimeFormat","console","warn","monthNames","names","map","_","i","setMonth","push","format","customPickerOrder","order","localeDateString","sort","a","b","positions","search","unit","formatToParts","filter","x","trim","supportsInputOfType","document","input","createElement","setAttribute","notADateValue","handleOnChange","changeEventValue","unitNames","dateValueLabel","role","unitIndex","placeholder","onKeyDown","renderCustomDatepicker","altKey","ctrlKey","metaKey","shiftKey","RadioGroup","name","label","FeedbackIndicator","Child","checked","RadioButton","Stepper","onDecrease","onIncrease","accessibilityConfigs","decrementText","incrementText","currentValueText","labelId","isDecrementDisabled","onDecrement","event","isMin","isIncrementDisabled","onIncrement","isMax","onClick","tabIndex","readOnly","Textarea","resizable","useCombinedRefs","refs","targetRef","forEach","current","useDynamicForm","sections","initialState","useMemo","initialFormState","section","items","item","initialValue","multi","controlType","isArray","isInteger","initialVisibility","initialVisibilityState","sectionKey","initiallyHidden","useState","state","setState","indicators","setIndicators","visibility","setVisibility","dirty","setDirty","useCallback","sectionState","hasOwnProperty","newValue","newOptions","targetValue","find","targetOption","options","o","multiple","getValueOfMultipleSelect","from","meta","newMeta","hasTruthyValue","itemState","hasIndicator","isVisible","checkMetaDataIf","method","condition","s","v","hasIndicators","isAllTruthy","renderForm","DynamicFormComponent","formInfo","patchState","existingState","setIndicator","setHidden","hidden","visible","info","title","DynamicFormSectionComponent","wrappingElement","additionalProps","getSections","DynamicFormItemComponent","formItem","commonProps","minLength","maxLength","formElementAdditionalProps","labelItem","descriptionItem","description","noBorder","message","rest","option","active"],"sourceRoot":""}