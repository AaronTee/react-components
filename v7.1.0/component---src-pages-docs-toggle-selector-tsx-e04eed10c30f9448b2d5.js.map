{"version":3,"file":"component---src-pages-docs-toggle-selector-tsx-e04eed10c30f9448b2d5.js","mappings":"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","sources":["webpack://react-components-docs/../lib/src/ToggleSelector/ToggleSelector.tsx","webpack://react-components-docs/../lib/src/ToggleSelector/ToggleSelectorItem.tsx","webpack://react-components-docs/./src/pages/docs/toggle-selector.tsx","webpack://react-components-docs/../lib/src/ToggleSelector/ToggleSelector.tsx?8949","webpack://react-components-docs/./static/icons/emoji-dizzy-fill.svg","webpack://react-components-docs/./static/icons/emoji-laughing-fill.svg","webpack://react-components-docs/./static/icons/emoji-smile-upside-down-fill.svg"],"sourcesContent":["import React from \"react\";\nimport classnames from \"classnames\";\nimport { ToggleSelectorItemProps } from \"./ToggleSelectorItem\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport \"./toggle-selector.scss\";\n\ninterface ToggleSelectorSingleProps {\n    /** allow multiple selections */\n    multiple?: false;\n    /** selected value */\n    value?: number;\n    /** on toggle selector change */\n    onChange?: (value: number) => void;\n}\n\ninterface ToggleSelectorMultipleProps {\n    /** allow multiple selections */\n    multiple?: true;\n    /** selected values */\n    value?: readonly number[];\n    /** on toggle selector change */\n    onChange?: (value: number[]) => void;\n}\n\ntype ToggleSelectorValueProps = ToggleSelectorSingleProps | ToggleSelectorMultipleProps;\ntype NativeDivProps = JSX.IntrinsicElements[\"fieldset\"];\n\nexport type ToggleSelectorProps = NativeDivProps &\n    ToggleSelectorValueProps & {\n        /** Element label */\n        label?: React.ReactNode;\n        /** disable element */\n        disabled?: boolean;\n        /** Form indicator */\n        indicator?: Indicator;\n    };\n\n/** A selector to display and select options in a flow. */\nexport const ToggleSelector: React.FC<ToggleSelectorProps> = React.forwardRef(\n    ({ multiple, value, onChange, indicator, label, ...props }: ToggleSelectorProps, ref: React.ForwardedRef<HTMLFieldSetElement>) => {\n        const [name] = React.useState<string>(randomId(\"ts-\"));\n\n        const handleChange = React.useCallback(\n            (e: React.ChangeEvent<HTMLInputElement>, childOnChange: React.ChangeEventHandler<HTMLInputElement>) => {\n                if (onChange) {\n                    if (multiple) {\n                        const values: number[] = (value as number[]) || [];\n                        const index: number = parseInt(e.target.dataset.indexNumber);\n                        if (values.includes(index)) {\n                            onChange(values.filter((item) => item !== index) as any);\n                        } else {\n                            onChange([...values, index].sort() as any);\n                        }\n                    } else {\n                        onChange(parseInt(e.target.dataset.indexNumber) as any);\n                    }\n                }\n                childOnChange && childOnChange(e);\n            },\n            [value, multiple, onChange]\n        );\n\n        return (\n            <fieldset {...props} ref={ref} className={classnames(\"rc\", \"toggle-selector\", props.className)}>\n                <FeedbackIndicator {...indicator} noBorder>\n                    {!!label && <legend>{label}</legend>}\n                    {props.children &&\n                        React.Children.map(props.children, (Child: React.ReactElement<ToggleSelectorItemProps>, index: number) => {\n                            return React.isValidElement<ToggleSelectorItemProps>(Child)\n                                ? React.cloneElement<ToggleSelectorItemProps & { [k: string]: any }>(Child as any, {\n                                      onChange: (e) => handleChange(e, Child.props?.onChange),\n                                      name: multiple ? null : name,\n                                      disabled: props.disabled || Child.props?.disabled,\n                                      type: multiple ? \"checkbox\" : \"radio\",\n                                      checked: multiple ? (Array.isArray(value) ? value.includes(index) : false) : (value as number) === index,\n                                      \"data-index-number\": index,\n                                  })\n                                : Child;\n                        })}\n                </FeedbackIndicator>\n            </fieldset>\n        );\n    }\n) as React.ForwardRefExoticComponent<React.PropsWithoutRef<ToggleSelectorProps & ToggleSelectorMultipleProps> & React.RefAttributes<HTMLFieldSetElement>>;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\nimport \"./toggle-selector-item.scss\";\n\nexport type ToggleSelectorItemProps = JSX.IntrinsicElements[\"input\"] & {\n    wrapperProps?: JSX.IntrinsicElements[\"div\"];\n    children?: React.ReactNode;\n};\n\nexport type ToggleSelectorItemComponent = React.FC<ToggleSelectorItemProps>;\n\nexport const ToggleSelectorItem: ToggleSelectorItemComponent = ({ wrapperProps, children, ...props }: ToggleSelectorItemProps) => {\n    const [id, setId] = React.useState<string>(props.id);\n\n    /** Sets custom id if the user din't pass any */\n    React.useEffect(() => setId(props.id || randomId(\"toggle-selector-\")), [props.id]);\n\n    return (\n        <div {...wrapperProps} className={classnames(\"rc\", \"toggle-selector-item\", wrapperProps?.className)}>\n            <input {...props} id={id} />\n            <label htmlFor={id}>{children}</label>\n        </div>\n    );\n};\n","import React, { useEffect } from \"react\";\nimport Docs from \"@common/Docs\";\nimport { ToggleSelector, ToggleSelectorItem } from \"@sebgroup/react-components/ToggleSelector\";\nimport { DynamicFormOption, useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\nimport { Indicator, IndicatorType } from \"@sebgroup/react-components/FeedbackIndicator\";\nimport LaughingIcon from \"../../../static/icons/emoji-laughing-fill.svg\";\nimport DizzyIcon from \"../../../static/icons/emoji-dizzy-fill.svg\";\nimport SmileUpsideDownIcon from \"../../../static/icons/emoji-smile-upside-down-fill.svg\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\n\nconst indicators: Array<DynamicFormOption<IndicatorType>> = [\n    { key: \"error\", label: \"danger\", value: \"danger\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"success\", label: \"success\", value: \"success\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n    { key: \"warning\", label: \"warning\", value: \"warning\", additionalProps: { wrapperProps: { className: \"d-inline-block\" } } },\n];\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/ToggleSelector/ToggleSelector\");\nconst code: string = `<ToggleSelector name=\"choices\" value={value} onChange={setValue}>\n    <ToggleSelectorItem>Yes</ToggleSelectorItem>\n    <ToggleSelectorItem>No</ToggleSelectorItem>\n    <ToggleSelectorItem>Maybe</ToggleSelectorItem>\n</ToggleSelector>`;\n\nconst ToggleSelectorPage: React.FC = (): React.ReactElement<void> => {\n    const [singleValue, setSingleValue] = React.useState<number>();\n    const [multipleValues, setMultipleValues] = React.useState<number[]>();\n\n    const {\n        renderForm: renderControls,\n        state: { controls },\n        setHidden,\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [\n                { key: \"multiple\", label: \"multiple\", controlType: \"Checkbox\", description: \"Select multiple items at the same time\" },\n                { key: \"disabled\", label: \"disabled\", description: \"You can disable individual buttons or disable all toggles\", controlType: \"Checkbox\" },\n                { key: \"indicator\", label: \"indicator\", controlType: \"Checkbox\", initialValue: false },\n                {\n                    key: \"indicatorType\",\n                    label: \"Indicator type\",\n                    options: indicators,\n                    controlType: \"Radio\",\n                    formElementAdditionalProps: { className: \"indent pl-3 pt-2\" },\n                },\n                { key: \"icons\", label: \"With icons as children\", controlType: \"Checkbox\", description: \"Find this example in the notes\" },\n            ],\n        },\n    ]);\n\n    useEffect(() => {\n        setHidden(\"controls\", \"indicatorType\", !controls.indicator);\n    }, [controls.indicator]);\n\n    const indicator: Indicator = React.useMemo(() => {\n        return controls.indicator ? { type: controls.indicatorType as IndicatorType, message: \"Indicator message\" } : null;\n    }, [controls.indicator, controls.indicatorType]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <ToggleSelector\n                    className=\"m-auto\"\n                    value={controls.multiple ? multipleValues : (singleValue as any)}\n                    onChange={(e) => (controls.multiple ? setMultipleValues(e as number[]) : setSingleValue(e as number))}\n                    multiple={!!controls.multiple}\n                    disabled={!!controls.disabled}\n                    indicator={controls.indicator ? indicator : null}\n                >\n                    <ToggleSelectorItem>\n                        {controls.icons && <LaughingIcon width=\"2em\" height=\"2em\" />}\n                        <span className=\"mx-auto\">Yes</span>\n                    </ToggleSelectorItem>\n                    <ToggleSelectorItem>\n                        {controls.icons && <DizzyIcon width=\"2em\" height=\"2em\" />}\n                        <span className=\"mx-auto\">No</span>\n                    </ToggleSelectorItem>\n                    <ToggleSelectorItem>\n                        {controls.icons && <SmileUpsideDownIcon width=\"2em\" height=\"2em\" />}\n                        <span className=\"mx-auto\">Maybe</span>\n                    </ToggleSelectorItem>\n                </ToggleSelector>\n            }\n            code={code}\n            controls={renderControls()}\n            note={\n                <>\n                    <h4>Toggle select with icons</h4>\n                    <p>If you want to render a toggle selector group with icons just pass the icon with the text as children and align them correctly. Find an example below:</p>\n\n                    <CodeSnippet language=\"jsx\">\n                        {`<ToggleSelector>\n    <ToggleSelectorItem>\n        <LaughingIcon />\n        <span className=\"mx-auto\">Yes</span>\n    </ToggleSelectorItem>\n    <ToggleSelectorItem>\n        <DizzyIcon />\n        <span className=\"mx-auto\">No</span>\n    </ToggleSelectorItem>\n    <ToggleSelectorItem>\n        <SmileUpsideDownIcon />\n        <span className=\"mx-auto\">Maybe</span>\n    </ToggleSelectorItem>\n</ToggleSelector>`}\n                    </CodeSnippet>\n                </>\n            }\n        />\n    );\n};\n\nexport default ToggleSelectorPage;\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport { ToggleSelectorItemProps } from \\\"./ToggleSelectorItem\\\";\\nimport { FeedbackIndicator, Indicator } from \\\"../FeedbackIndicator\\\";\\nimport { randomId } from \\\"@sebgroup/frontend-tools/randomId\\\";\\nimport \\\"./toggle-selector.scss\\\";\\n\\ninterface ToggleSelectorSingleProps {\\n    /** allow multiple selections */\\n    multiple?: false;\\n    /** selected value */\\n    value?: number;\\n    /** on toggle selector change */\\n    onChange?: (value: number) => void;\\n}\\n\\ninterface ToggleSelectorMultipleProps {\\n    /** allow multiple selections */\\n    multiple?: true;\\n    /** selected values */\\n    value?: readonly number[];\\n    /** on toggle selector change */\\n    onChange?: (value: number[]) => void;\\n}\\n\\ntype ToggleSelectorValueProps = ToggleSelectorSingleProps | ToggleSelectorMultipleProps;\\ntype NativeDivProps = JSX.IntrinsicElements[\\\"fieldset\\\"];\\n\\nexport type ToggleSelectorProps = NativeDivProps &\\n    ToggleSelectorValueProps & {\\n        /** Element label */\\n        label?: React.ReactNode;\\n        /** disable element */\\n        disabled?: boolean;\\n        /** Form indicator */\\n        indicator?: Indicator;\\n    };\\n\\n/** A selector to display and select options in a flow. */\\nexport const ToggleSelector: React.FC<ToggleSelectorProps> = React.forwardRef(\\n    ({ multiple, value, onChange, indicator, label, ...props }: ToggleSelectorProps, ref: React.ForwardedRef<HTMLFieldSetElement>) => {\\n        const [name] = React.useState<string>(randomId(\\\"ts-\\\"));\\n\\n        const handleChange = React.useCallback(\\n            (e: React.ChangeEvent<HTMLInputElement>, childOnChange: React.ChangeEventHandler<HTMLInputElement>) => {\\n                if (onChange) {\\n                    if (multiple) {\\n                        const values: number[] = (value as number[]) || [];\\n                        const index: number = parseInt(e.target.dataset.indexNumber);\\n                        if (values.includes(index)) {\\n                            onChange(values.filter((item) => item !== index) as any);\\n                        } else {\\n                            onChange([...values, index].sort() as any);\\n                        }\\n                    } else {\\n                        onChange(parseInt(e.target.dataset.indexNumber) as any);\\n                    }\\n                }\\n                childOnChange && childOnChange(e);\\n            },\\n            [value, multiple, onChange]\\n        );\\n\\n        return (\\n            <fieldset {...props} ref={ref} className={classnames(\\\"rc\\\", \\\"toggle-selector\\\", props.className)}>\\n                <FeedbackIndicator {...indicator} noBorder>\\n                    {!!label && <legend>{label}</legend>}\\n                    {props.children &&\\n                        React.Children.map(props.children, (Child: React.ReactElement<ToggleSelectorItemProps>, index: number) => {\\n                            return React.isValidElement<ToggleSelectorItemProps>(Child)\\n                                ? React.cloneElement<ToggleSelectorItemProps & { [k: string]: any }>(Child as any, {\\n                                      onChange: (e) => handleChange(e, Child.props?.onChange),\\n                                      name: multiple ? null : name,\\n                                      disabled: props.disabled || Child.props?.disabled,\\n                                      type: multiple ? \\\"checkbox\\\" : \\\"radio\\\",\\n                                      checked: multiple ? (Array.isArray(value) ? value.includes(index) : false) : (value as number) === index,\\n                                      \\\"data-index-number\\\": index,\\n                                  })\\n                                : Child;\\n                        })}\\n                </FeedbackIndicator>\\n            </fieldset>\\n        );\\n    }\\n) as React.ForwardRefExoticComponent<React.PropsWithoutRef<ToggleSelectorProps & ToggleSelectorMultipleProps> & React.RefAttributes<HTMLFieldSetElement>>;\\n\";","var React = require('react');\n\nfunction EmojiDizzyFill (props) {\n    return React.createElement(\"svg\",props,[React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"d\":\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\",\"key\":0}),React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"d\":\"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM4.146 5.146a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 1 1 .708.708l-.647.646.647.646a.5.5 0 1 1-.708.708L5.5 7.207l-.646.647a.5.5 0 1 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 0-.708zm5 0a.5.5 0 0 1 .708 0l.646.647.646-.647a.5.5 0 0 1 .708.708l-.647.646.647.646a.5.5 0 0 1-.708.708l-.646-.647-.646.647a.5.5 0 1 1-.708-.708l.647-.646-.647-.646a.5.5 0 0 1 0-.708zM8 13a2 2 0 1 0 0-4 2 2 0 0 0 0 4z\",\"key\":1})]);\n}\n\nEmojiDizzyFill.defaultProps = {\"width\":\"1em\",\"height\":\"1em\",\"fill\":\"currentColor\",\"className\":\"bi bi-emoji-dizzy-fill\",\"viewBox\":\"0 0 16 16\"};\n\nmodule.exports = EmojiDizzyFill;\n\nEmojiDizzyFill.default = EmojiDizzyFill;\n","var React = require('react');\n\nfunction EmojiLaughingFill (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"d\":\"M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zM7 6.5c0 .501-.164.396-.415.235C6.42 6.629 6.218 6.5 6 6.5c-.218 0-.42.13-.585.235C5.164 6.896 5 7 5 6.5 5 5.672 5.448 5 6 5s1 .672 1 1.5zm5.331 3a1 1 0 0 1 0 1A4.998 4.998 0 0 1 8 13a4.998 4.998 0 0 1-4.33-2.5A1 1 0 0 1 4.535 9h6.93a1 1 0 0 1 .866.5zm-1.746-2.765C10.836 6.896 11 7 11 6.5c0-.828-.448-1.5-1-1.5s-1 .672-1 1.5c0 .501.164.396.415.235.165-.106.367-.235.585-.235.218 0 .42.13.585.235z\"}));\n}\n\nEmojiLaughingFill.defaultProps = {\"width\":\"1em\",\"height\":\"1em\",\"fill\":\"currentColor\",\"className\":\"bi bi-emoji-laughing-fill\",\"viewBox\":\"0 0 16 16\"};\n\nmodule.exports = EmojiLaughingFill;\n\nEmojiLaughingFill.default = EmojiLaughingFill;\n","var React = require('react');\n\nfunction EmojiSmileUpsideDownFill (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"fillRule\":\"evenodd\",\"d\":\"M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zM7 9.5C7 8.672 6.552 8 6 8s-1 .672-1 1.5.448 1.5 1 1.5 1-.672 1-1.5zM4.285 6.433a.5.5 0 0 0 .683-.183A3.498 3.498 0 0 1 8 4.5c1.295 0 2.426.703 3.032 1.75a.5.5 0 0 0 .866-.5A4.498 4.498 0 0 0 8 3.5a4.5 4.5 0 0 0-3.898 2.25.5.5 0 0 0 .183.683zM10 8c.552 0 1 .672 1 1.5s-.448 1.5-1 1.5-1-.672-1-1.5S9.448 8 10 8z\"}));\n}\n\nEmojiSmileUpsideDownFill.defaultProps = {\"width\":\"1em\",\"height\":\"1em\",\"fill\":\"currentColor\",\"className\":\"bi bi-emoji-smile-upside-down-fill\",\"viewBox\":\"0 0 16 16\"};\n\nmodule.exports = EmojiSmileUpsideDownFill;\n\nEmojiSmileUpsideDownFill.default = EmojiSmileUpsideDownFill;\n"],"names":["ToggleSelector","React","ref","multiple","value","onChange","indicator","label","props","name","randomId","handleChange","e","childOnChange","values","index","parseInt","target","dataset","indexNumber","includes","filter","item","sort","className","classnames","FeedbackIndicator","noBorder","children","Child","disabled","type","checked","Array","isArray","ToggleSelectorItem","wrapperProps","id","setId","htmlFor","indicators","key","additionalProps","importString","require","singleValue","setSingleValue","multipleValues","setMultipleValues","useDynamicForm","items","controlType","description","initialValue","options","formElementAdditionalProps","renderControls","renderForm","controls","state","setHidden","useEffect","indicatorType","message","Docs","mainFile","example","icons","width","height","code","note","CodeSnippet","language","EmojiDizzyFill","createElement","defaultProps","module","exports","default","EmojiLaughingFill","EmojiSmileUpsideDownFill"],"sourceRoot":""}