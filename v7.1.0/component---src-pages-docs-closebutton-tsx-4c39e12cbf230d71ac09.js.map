{"version":3,"file":"component---src-pages-docs-closebutton-tsx-4c39e12cbf230d71ac09.js","mappings":"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","sources":["webpack://react-components-docs/./src/pages/docs/closebutton.tsx","webpack://react-components-docs/../lib/src/Slider/Slider.tsx","webpack://react-components-docs/../lib/src/CloseButton/CloseButton.tsx?b666"],"sourcesContent":["import React from \"react\";\nimport Docs from \"@common/Docs\";\nimport { CloseButton } from \"@sebgroup/react-components/CloseButton\";\nimport { Slider } from \"@sebgroup/react-components/Slider\";\nimport { useDynamicForm } from \"@sebgroup/react-components/hooks/useDynamicForm\";\n\nconst importString: string = require(\"!raw-loader!@sebgroup/react-components/CloseButton/CloseButton\");\nconst code: string = `<CloseButton />`;\n\nconst ChipPage: React.FC = (): React.ReactElement<void> => {\n    const [size, setSize] = React.useState<number>(30);\n\n    const {\n        renderForm: renderControls,\n        state: { controls },\n    } = useDynamicForm([\n        {\n            key: \"controls\",\n            items: [{ key: \"disabled\", label: \"disabled\", controlType: \"Checkbox\" }],\n        },\n    ]);\n\n    return (\n        <Docs\n            mainFile={importString}\n            example={\n                <div className=\"w-100 d-flex justify-content-center\">\n                    <CloseButton style={{ fontSize: size }} onClick={() => console.log(\"Clicked\")} disabled={!!controls.disabled} />\n                </div>\n            }\n            code={code}\n            controls={\n                <>\n                    <p>You can scale up/down the size of the button using font-size</p>\n                    <Slider min={10} max={50} step={10} value={size} onChange={(e) => setSize(parseInt(e.target.value))} />\n                    {renderControls()}\n                </>\n            }\n        />\n    );\n};\n\nexport default ChipPage;\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { FeedbackIndicator, Indicator } from \"../FeedbackIndicator\";\nimport \"./slider.scss\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\n\n// This solution is meant to fix Gatsby build which complains that window doesn't exist in server-side rendering\nconst safeWindow: Window | null = typeof window !== \"undefined\" ? window : null;\n\nexport type SliderTheme = \"primary\" | \"inverted\" | \"success\" | \"danger\" | \"warning\" | \"purple\";\nexport type SliderAppearance = \"normal\" | \"alternative\";\n\nexport interface SliderLabel {\n    position: number;\n    label: React.ReactNode;\n}\n\nexport type SliderProps = Omit<JSX.IntrinsicElements[\"input\"], \"value\"> & {\n    /** set to always show tooltip */\n    alwaysShowTooltip?: boolean;\n    /** field label */\n    label?: string;\n    /** range slider labels */\n    labels?: Array<SliderLabel>;\n    /** set to show ticks */\n    showTicks?: boolean;\n    /** slider theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    theme?: SliderTheme;\n    /** set to show alternative theme */\n    alternative?: boolean;\n    /** tooltip theme: `primary` | `inverted` | `success` | `danger` | `warning` | `purple` */\n    tooltipTheme?: SliderTheme;\n    /** tooltip value */\n    tooltipValue?: string;\n    /** field value */\n    value: number;\n    /** Indicator type and message */\n    indicator?: Indicator;\n};\n\n/** The component allows for easy adjustments of a value and check the updated result immediately. */\nexport const Slider: React.FC<SliderProps> = React.forwardRef(\n    (\n        { alwaysShowTooltip, label, labels, max, min, showTicks, step, theme = \"primary\", alternative, tooltipTheme = \"inverted\", tooltipValue, indicator, value, disabled, id, ...props }: SliderProps,\n        ref: React.ForwardedRef<HTMLInputElement>\n    ) => {\n        const inputWrapperRef: React.MutableRefObject<HTMLDivElement> = React.useRef<HTMLDivElement>();\n        const [minValue, setMinValue] = React.useState<number>((min as number) || 0);\n        const [maxValue, setMaxValue] = React.useState<number>((max as number) || 100);\n        const [sliderTrackBackground, setSliderTrackBackground] = React.useState<string>(null);\n        const [labelsPositions, setLabelsPositions] = React.useState<Array<string>>([]);\n        const [uniqueId, setUniqueId] = React.useState<string>(id);\n\n        /**\n         * Calculating the position of the label based on it's value\n         * @param {number} value The Slider value\n         * @returns {number} The position of the label in percentage\n         */\n        function getLabelPosition(value: number): number {\n            if (value >= maxValue) {\n                return 100;\n            } else if (value <= minValue) {\n                return 0;\n            }\n            return Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n        }\n\n        React.useEffect(() => {\n            // Checking if the min or max are not numbers, null value or undefined\n            const minValue: number = typeof min !== \"number\" ? 0 : min;\n            const maxValue: number = typeof max !== \"number\" ? 100 : max;\n            setMinValue(minValue);\n            setMaxValue(maxValue);\n        }, [min, max]);\n\n        React.useEffect(() => {\n            if (labels && labels.length) {\n                const positions: Array<string> = [];\n                labels.map((label: SliderLabel) => {\n                    positions.push(getLabelPosition(label.position) + \"%\");\n                });\n                setLabelsPositions(positions);\n            }\n        }, [labels, minValue, maxValue]);\n\n        React.useEffect(() => {\n            setUniqueId(id ? id : randomId(\"slider-\"));\n        }, [id]);\n\n        React.useLayoutEffect(() => {\n            let newTrackBackground: string = null;\n            if (inputWrapperRef?.current) {\n                const style: CSSStyleDeclaration = safeWindow?.getComputedStyle(inputWrapperRef?.current);\n                const inputStyle: CSSStyleDeclaration = safeWindow?.getComputedStyle(inputWrapperRef?.current.querySelector(\"input\"));\n                const backgroundColor: string = style?.getPropertyValue(\"--slider-background-color\");\n                const primaryColor: string = style?.getPropertyValue(\"--slider-primary-color\");\n                const percent: number = Math.abs(((value - minValue) / (maxValue - minValue)) * 100);\n                newTrackBackground = `linear-gradient(to right, ${primaryColor} calc(${inputStyle.marginLeft} / 0.25), ${primaryColor} calc(${inputStyle.marginLeft} * 2 + ${percent}%), ${backgroundColor} ${percent}%, ${backgroundColor} 100%)`;\n            }\n            setSliderTrackBackground(newTrackBackground);\n        }, [inputWrapperRef, value, theme, disabled]);\n\n        return (\n            <FeedbackIndicator {...indicator} noBorder>\n                <div className={classnames(\"rc custom-slider\", props.className, `custom-slider--${theme}`, { \"custom-slider--disabled\": disabled })}>\n                    {label && (\n                        <label className=\"custom-slider__label\" htmlFor={uniqueId}>\n                            {label}\n                        </label>\n                    )}\n                    <div ref={inputWrapperRef} className={classnames(\"custom-slider__input-field\", { \"custom-slider__input-field--alt\": alternative })}>\n                        <input\n                            {...props}\n                            id={uniqueId}\n                            value={value}\n                            disabled={disabled}\n                            style={{ background: sliderTrackBackground }}\n                            ref={ref}\n                            type=\"range\"\n                            min={minValue}\n                            max={maxValue}\n                            step={step}\n                        />\n                        <div\n                            aria-hidden\n                            className={classnames(\"custom-slider__tooltip-wrapper\", `custom-slider__tooltip-wrapper--${tooltipTheme}`, {\n                                \"custom-slider__tooltip-wrapper--force-show\": alwaysShowTooltip,\n                            })}\n                        >\n                            <div className=\"custom-slider__tooltip\" style={{ left: `${getLabelPosition(value)}%` }}>\n                                {tooltipValue || value}\n                            </div>\n                        </div>\n                        {labels && labels.length ? (\n                            <div className=\"custom-slider__tickmarks\" aria-hidden>\n                                {labels.map((item: SliderLabel, i: number) => {\n                                    return (\n                                        <div\n                                            key={i}\n                                            className={classnames(\"custom-slider__tickmarks-label\", { \"custom-slider__tickmarks-label--ticks\": showTicks })}\n                                            style={{ left: labelsPositions[i] }}\n                                        >\n                                            <span>{item.label}</span>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n            </FeedbackIndicator>\n        );\n    }\n);\n","export default \"import React from \\\"react\\\";\\nimport classnames from \\\"classnames\\\";\\nimport \\\"./close-button.scss\\\";\\n\\n/**\\n * TODO: This is a component that fixes the broken `.close` element provided by Bootstrap\\n * This component should be replaced by the element from Bootstrap when this PR is merged:\\n * https://github.com/sebgroup/bootstrap/pull/533\\n */\\n\\nexport const CloseButton: React.FC<JSX.IntrinsicElements[\\\"button\\\"]> = React.memo(\\n    React.forwardRef((props: JSX.IntrinsicElements[\\\"button\\\"], ref: React.ForwardedRef<HTMLButtonElement>) => {\\n        return <button ref={ref} {...props} className={classnames(\\\"rc close-btn\\\", props.className)} />;\\n    })\\n);\\n\";"],"names":["importString","require","React","size","setSize","useDynamicForm","key","items","label","controlType","renderControls","renderForm","controls","state","mainFile","example","className","style","fontSize","onClick","console","log","disabled","code","min","max","step","value","onChange","e","parseInt","target","safeWindow","window","Slider","ref","alwaysShowTooltip","labels","showTicks","theme","alternative","tooltipTheme","tooltipValue","indicator","id","props","inputWrapperRef","minValue","setMinValue","maxValue","setMaxValue","sliderTrackBackground","setSliderTrackBackground","labelsPositions","setLabelsPositions","uniqueId","setUniqueId","getLabelPosition","Math","abs","length","positions","map","push","position","randomId","newTrackBackground","current","getComputedStyle","inputStyle","querySelector","backgroundColor","getPropertyValue","primaryColor","percent","marginLeft","FeedbackIndicator","noBorder","classnames","htmlFor","background","type","left","item","i"],"sourceRoot":""}