{"version":3,"file":"component---src-pages-docs-dynamic-forms-tsx-94738140b9802308a7d5.js","mappings":"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","sources":["webpack://react-components-docs/./src/pages/docs/dynamic-forms.tsx","webpack://react-components-docs/../lib/src/Table/TableContextProvider.tsx","webpack://react-components-docs/../lib/src/Table/Table.tsx","webpack://react-components-docs/../lib/src/Table/parts/TableHeaderCell.tsx","webpack://react-components-docs/../lib/src/Table/parts/TableHeader.tsx","webpack://react-components-docs/../lib/src/Table/parts/TableBody.tsx","webpack://react-components-docs/../lib/src/Table/parts/TableCell.tsx","webpack://react-components-docs/../lib/src/Table/parts/TableRow.tsx","webpack://react-components-docs/../lib/src/Table/parts/helperFunctions.ts","webpack://react-components-docs/../lib/src/Table/table-typings.ts"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport Layout from \"@common/Layout\";\nimport { CodeSnippet } from \"@common/CodeSnippet\";\nimport { useDynamicForm, DynamicFormSection } from \"@sebgroup/react-components/hooks\";\nimport { Table, TableBody, TableCell, TableHeader, TableHeaderCell, TableRow } from \"@sebgroup/react-components/Table\";\nimport { Indicator } from \"@sebgroup/react-components/FeedbackIndicator\";\n\nconst DynamicForms: React.FC = React.memo(() => {\n    return (\n        <Layout>\n            <Helmet>\n                <title>Dynamic Forms - SEB React Components</title>\n            </Helmet>\n            <div className=\"container\">\n                <h1 className=\"pt-5 pb-3\">Dynamic Forms</h1>\n                <h4 className=\"font-weight-normal\">How to use Dynamic Forms Custom Hook to speed up building simple forms.</h4>\n\n                <div role=\"alert\" className=\"alert alert-warning rounded mt-3 py-3\">\n                    <strong>⚠ Dynamic Forms custom hook is still in beta stage so expect things to change (please provide feedback if you can)</strong>\n                </div>\n\n                <h2 className=\"pt-3 pb-3\">Basic Usage</h2>\n                <p>\n                    Import the hook, define the <code>DynamicFormSection</code>s and render the form.\n                </p>\n                <CodeSnippet language=\"javascript\">\n                    {`\nconst Component: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            title: \"Login\",\n            key: \"section-1-login\",\n            items: [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    controlType: \"Text\",\n                },\n                {\n                    key: \"email\",\n                    label: \"Email\",\n                    placeholder: \"name@domain.com\",\n                    controlType: \"Text\",\n                },\n                {\n                    key: \"user-accepted\",\n                    label: \"I understand\",\n                    initialValue: true,\n                    controlType: \"Checkbox\",\n                },\n            ],\n        },\n    ];\n\n    const { renderForm } = useDynamicForm(sections);\n\n    return <div>{renderForm()}</div>;\n};\n                    `}\n                </CodeSnippet>\n\n                <div className=\"p-3 rounded bg-white\">\n                    <Component />\n                </div>\n\n                <hr />\n\n                <h2 className=\"pt-3 pb-3\">Conditional rendering example</h2>\n                <p>Every form element can be hidden based on any condition you define yourself. Simply set the visibility for that key as shown in the code snippet below.</p>\n                <CodeSnippet language=\"javascript\">\n                    {`\nconst ComponentConditionalRender: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            title: \"Extra Info\",\n            key: \"section-2-extra-info\",\n            items: [\n                {\n                    key: \"have-additional-info\",\n                    label: \"I have additional information\",\n                    controlType: \"Checkbox\",\n                },\n                {\n                    key: \"info\",\n                    placeholder: \"Additional information\",\n                    controlType: \"Text\",\n                },\n            ],\n        },\n    ];\n\n    const { \n        renderForm, \n        meta: {\n            \"section-2-extra-info\": {\n                \"have-additional-info\": { hasTruthyValue }\n            }\n        }, \n        setHidden,\n    } = useDynamicForm(sections);\n\n    useEffect(() => {\n        setHidden(\"section-2-extra-info\", \"info\", !hasTruthyValue)\n    }, [hasTruthyValue])\n\n    return <div>{renderForm()}</div>;\n};\n                    `}\n                </CodeSnippet>\n                <div className=\"p-3 rounded bg-white\">\n                    <ComponentConditionalRender />\n                </div>\n\n                <hr />\n\n                <h2 className=\"pt-3 pb-3\">Form errors example</h2>\n                <p>\n                    Every form element defined can display an error message based on any validation rules you define yourself. Simply set the indicator for that key as shown in the code snippet below.\n                </p>\n                <CodeSnippet language=\"javascript\">\n                    {`\nconst FormWithErrors: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            key: \"section\",\n            items: [\n                {\n                    key: \"field\",\n                    description: \"This is a mandatory field, but it shouldn't be too long\",\n                    controlType: \"Text\",\n                },\n            ],\n        },\n    ];\n\n    const {\n        renderForm,\n        state: {\n            \"section\": {\n                \"field\": value\n            }\n        },\n        setIndicator\n    } = useDynamicForm(sections);\n\n    useEffect(() => {\n        let indicator: Indicator = {\n            type: \"success\",\n            message: \"Perfect :)\"\n        };\n        if (!value) {\n            indicator = {\n                type: \"danger\",\n                message: \"Please fill in this field!\"  \n            }\n        } else if ((value as string)?.length > 15) {\n            indicator = {\n                type: \"warning\",\n                message: \"Too long :(\"  \n            }\n        }\n\n        setIndicator(\"section\", \"field\", indicator);\n    }, [value]);\n\n    return (\n            <div>{renderForm()}</div>\n    );\n};\n                    `}\n                </CodeSnippet>\n                <div className=\"p-3 rounded bg-white\">\n                    <FormWithErrors />\n                </div>\n\n                <hr />\n\n                <h2 className=\"pt-3 pb-3\">Dynamic forms API</h2>\n\n                <h3 className=\"pt-3 pb-3\">\n                    <code>useDynamicForm</code>\n                </h3>\n                <p>\n                    <code>type DynamicFormInternalStateValue = string | string[] | Date | boolean | number | null;</code>\n                </p>\n                <p>\n                    <code>{`type DynamicFormMetaDataItem = { isVisible: boolean; hasIndicator: boolean; hasTruthyValue: boolean; }`}</code>\n                </p>\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHeaderCell>Property name</TableHeaderCell>\n                            <TableHeaderCell>Value type</TableHeaderCell>\n                            <TableHeaderCell>Info</TableHeaderCell>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <b>renderForm</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n() => JSX.Element\n                                `}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>The callback function which will render the entire form.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>state</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n[k: string]: {\n    [k: string]: DynamicFormInternalStateValue;\n};\n                                `}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>The current state of the form.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>patchState</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n(section: string, key: string, value: DynamicFormInternalStateValue) => void;\n`}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>A helper utility to change the value of a particular item.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>setIndicator</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n(section: string, key: string, indicator: FeedbackIndicatorProps) => void;\n`}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>A helper utility to set a feedback indicator of a particular item.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>setHidden</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n(section: string, key: string, hidden: boolean) => void;\n`}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>A helper utility to set visibility of a particular item.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>meta</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n[k: string]: {\n    [k: string]: DynamicFormMetaDataItem;\n};\n                                `}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>The metadata of each current field value in the form. Shows if each field is visible, has an indicator active or has a truthy value.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>info</b>\n                            </TableCell>\n                            <TableCell>\n                                <code>\n                                    <pre style={{ color: \"currentcolor\" }}>{`\n{ dirty: boolean; hasIndicators: boolean; isAllTruthy: boolean; }\n                                `}</pre>\n                                </code>\n                            </TableCell>\n                            <TableCell>Additional information about current state of the form.</TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n\n                <h3 className=\"pt-3 pb-3\">\n                    <code>DynamicFormSection</code>\n                </h3>\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHeaderCell>Property name</TableHeaderCell>\n                            <TableHeaderCell>Optional</TableHeaderCell>\n                            <TableHeaderCell>Value type</TableHeaderCell>\n                            <TableHeaderCell>Info</TableHeaderCell>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <b>key</b>\n                            </TableCell>\n                            <TableCell></TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>Required unique id of this element</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>title</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>The title of the header of the section</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>items</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`Array<DynamicFormItem>`}</code>\n                            </TableCell>\n                            <TableCell>The form items that belong to that section.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>wrappingElement</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`\"div\" | \"section\" | \"none\"`}</code>\n                            </TableCell>\n                            <TableCell>The wrapping element (if any) for the form items of that section. Defaut: \"none\"'.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>additionalProps</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`{ [k: string]: any; }`}</code>\n                            </TableCell>\n                            <TableCell>Any additional element props to be mapped to the wrappingElement (if one is enabled).</TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n\n                <h3 className=\"pt-3 pb-3\">\n                    <code>DynamicFormItem</code>\n                </h3>\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHeaderCell>Property name</TableHeaderCell>\n                            <TableHeaderCell>Optional</TableHeaderCell>\n                            <TableHeaderCell>Value type</TableHeaderCell>\n                            <TableHeaderCell>Info</TableHeaderCell>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <b>key</b>\n                            </TableCell>\n                            <TableCell></TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>Required unique id of this element</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>controlType</b>\n                            </TableCell>\n                            <TableCell></TableCell>\n                            <TableCell>\n                                <code>\"Hidden\" | \"Text\" | \"Textarea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Option\" | \"ErrorLabel\" | \"Stepper\"</code>\n                            </TableCell>\n                            <TableCell>Required type of element (or control). Default: \"Text\".</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>initialValue</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`string | string[] | Date | boolean | number | null`}</code>\n                            </TableCell>\n                            <TableCell>Optional initial value of the element when it gets created.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>label</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>An optional label displayead above the form field.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>description</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>An optional description displayed below the label and above the form field.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>multi</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>boolean</code>\n                            </TableCell>\n                            <TableCell>\n                                This will enable 'multiple' property for the <code>Dropdown</code> component\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>min</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`number | Date`}</code>\n                            </TableCell>\n                            <TableCell>\n                                <p>\n                                    The 'min' property which will applied to the following components: <code>Stepper</code>, <code>Datepicker</code>\n                                </p>\n                                <p>\n                                    This will also apply the 'minLength' property of <code>Text</code> and <code>TextArea</code>\n                                </p>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>max</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`number | Date`}</code>\n                            </TableCell>\n                            <TableCell>\n                                <p>\n                                    The 'max' property which will applied to the following components: <code>Stepper</code>, <code>Datepicker</code>\n                                </p>\n                                <p>\n                                    This will also apply the 'maxLength' property of <code>Text</code> and <code>TextArea</code>\n                                </p>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>placeholder</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>\n                                The 'placeholder' property which will applied to the following components: <code>Text</code>, <code>Textarea</code>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>options</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`Array<DynamicFormOption>`}</code>\n                            </TableCell>\n                            <TableCell>\n                                Defines all the available options for the following components: <code>Dropdown</code>, <code>Radio</code>, <code>Option</code>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>formElementAdditionalProps</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`{ [k: string]: any; }`}</code>\n                            </TableCell>\n                            <TableCell>\n                                Any additional element props to be mapped to the element. Depends on the <b>controlType</b>. Must be a valid prop for that element.\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>wrappingElement</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`\"div\" | \"section\" | \"none\"`}</code>\n                            </TableCell>\n                            <TableCell>The wrapping element (if any) for the form item. It wraps the label, element, error message and description in the chosen element. Defaut: \"none\"'.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>additionalProps</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`{ [k: string]: any; }`}</code>\n                            </TableCell>\n                            <TableCell>Any additional element props to be mapped to the wrappingElement (if one is enabled).</TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n\n                <h3 className=\"pt-3 pb-3\">\n                    <code>{`DynamicFormOption<T = any>`}</code>\n                </h3>\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHeaderCell>Property name</TableHeaderCell>\n                            <TableHeaderCell>Optional</TableHeaderCell>\n                            <TableHeaderCell>Value type</TableHeaderCell>\n                            <TableHeaderCell>Info</TableHeaderCell>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <b>key</b>\n                            </TableCell>\n                            <TableCell></TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>Required unique id of this option</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>value</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>T</code>\n                            </TableCell>\n                            <TableCell>The value of the option.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>label</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>The label of the option.</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>description</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>string</code>\n                            </TableCell>\n                            <TableCell>\n                                An optional description displayed below the label for the <code>Radio</code> component.\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <b>additionalProps</b>\n                            </TableCell>\n                            <TableCell>&#10004;</TableCell>\n                            <TableCell>\n                                <code>{`{ [k: string]: any; }`}</code>\n                            </TableCell>\n                            <TableCell>\n                                Any additional element props to be mapped to the underlying option element. Depends on the <b>controlType</b>. Must be a valid prop for that element.\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        </Layout>\n    );\n});\n\nexport default DynamicForms;\n\nconst Component: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            title: \"Login\",\n            key: \"section-1-login\",\n            items: [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    controlType: \"Text\",\n                },\n                {\n                    key: \"email\",\n                    label: \"Email\",\n                    placeholder: \"name@domain.com\",\n                    controlType: \"Text\",\n                },\n                {\n                    key: \"user-accepted\",\n                    label: \"I understand\",\n                    initialValue: true,\n                    controlType: \"Checkbox\",\n                },\n            ],\n        },\n    ];\n\n    const { renderForm } = useDynamicForm(sections);\n\n    return <div>{renderForm()}</div>;\n};\n\nconst ComponentConditionalRender: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            title: \"Extra Info\",\n            key: \"section-2-extra-info\",\n            items: [\n                {\n                    key: \"have-additional-info\",\n                    label: \"I have additional information\",\n                    controlType: \"Checkbox\",\n                },\n                {\n                    key: \"info\",\n                    placeholder: \"Additional information\",\n                    controlType: \"Text\",\n                },\n            ],\n        },\n    ];\n\n    const {\n        renderForm,\n        meta: {\n            \"section-2-extra-info\": {\n                \"have-additional-info\": { hasTruthyValue },\n            },\n        },\n        setHidden,\n    } = useDynamicForm(sections);\n\n    useEffect(() => {\n        setHidden(\"section-2-extra-info\", \"info\", !hasTruthyValue);\n    }, [hasTruthyValue]);\n\n    return <div>{renderForm()}</div>;\n};\n\nconst FormWithErrors: React.FC = () => {\n    const sections: DynamicFormSection[] = [\n        {\n            key: \"section\",\n            items: [\n                {\n                    key: \"field\",\n                    description: \"This is a mandatory field, but it shouldn't be too long\",\n                    controlType: \"Text\",\n                },\n            ],\n        },\n    ];\n\n    const {\n        renderForm,\n        state: {\n            section: { field: value },\n        },\n        setIndicator,\n    } = useDynamicForm(sections);\n\n    useEffect(() => {\n        let indicator: Indicator = {\n            type: \"success\",\n            message: \"Perfect :)\",\n        };\n        if (!value) {\n            indicator = {\n                type: \"danger\",\n                message: \"Please fill in this field!\",\n            };\n        } else if ((value as string)?.length > 15) {\n            indicator = {\n                type: \"warning\",\n                message: \"Too long :(\",\n            };\n        }\n\n        setIndicator(\"section\", \"field\", indicator);\n    }, [value]);\n\n    return <div>{renderForm()}</div>;\n};\n","import React from \"react\";\nimport { SortDirection } from \"./table-typings\";\n\nexport interface SortedColumn<T = any> {\n    accessor: keyof T;\n    sortDirection: SortDirection;\n}\n\ninterface TableState {\n    sortedColumn: SortedColumn;\n    expandedRows: Array<string>;\n}\n\nexport type TableContextType = {\n    tableState: TableState;\n    setTableState: (newState: TableState) => void;\n    onRowSelect: (event: React.ChangeEvent<HTMLInputElement>, rowKey: string) => void;\n    onRowExpand: (isExpanded: boolean, rowKey: string) => void;\n    onSort: any;\n};\n\nconst defaultContext: TableContextType = {\n    tableState: {\n        sortedColumn: null,\n        expandedRows: [],\n    },\n    setTableState: null,\n    onRowSelect: null,\n    onRowExpand: null,\n    onSort: null,\n};\nexport const TableContext = React.createContext(defaultContext);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { SortedColumn, TableContext } from \"./TableContextProvider\";\nimport \"./table.scss\";\n\nexport type TableTheme = \"light\" | \"dark\";\n\nexport type TableProps = JSX.IntrinsicElements[\"table\"] & {\n    /** callback when row is selected */\n    onRowSelect?: (event: React.ChangeEvent<HTMLInputElement>, rowKey: string) => void;\n    /** callback when row is expanded */\n    onRowExpand?: (isExpanded: boolean, rowKey: string) => void;\n    /** table theme */\n    theme?: TableTheme;\n    /** callback when column is sorted */\n    onSort?: (sortedColumn: SortedColumn) => void;\n    /** preset sorted column */\n    sortedColumn?: SortedColumn;\n};\n\nexport const Table: React.FunctionComponent<TableProps> = React.memo(\n    React.forwardRef(({ onRowSelect, onRowExpand, onSort, sortedColumn, theme = \"light\", className, ...props }: TableProps, ref: React.ForwardedRef<HTMLTableElement>): React.ReactElement<void> => {\n        const [tableState, setTableState] = React.useState({ expandedRows: [], sortedColumn });\n        return (\n            <TableContext.Provider value={{ tableState, onSort, onRowSelect, onRowExpand, setTableState }}>\n                <table {...props} className={classnames(\"table\", className, theme)} ref={ref} />\n            </TableContext.Provider>\n        );\n    })\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { SortDirection } from \"../table-typings\";\nimport { SortedColumn, TableContext } from \"../TableContextProvider\";\n\nexport type TableHeaderCellProps<T = any> = JSX.IntrinsicElements[\"th\"] & {\n    accessor?: keyof T;\n    disableSort?: boolean;\n    sortDirection?: SortDirection;\n};\n\nconst TableHeaderCell: React.FC<TableHeaderCellProps> = React.forwardRef(\n    ({ accessor, disableSort, className, sortDirection, onClick, ...props }: TableHeaderCellProps, ref: React.ForwardedRef<HTMLTableCellElement>) => {\n        const context = React.useContext(TableContext);\n        const [sortedColumn, setSortedColumn] = React.useState<SortedColumn>(null);\n        const [sortOrder, setSortOrder] = React.useState<SortDirection>(SortDirection.ASC);\n        const [sortable, setSortable] = React.useState<boolean>(false);\n\n        /**\n         * get latest sort direction\n         * @param oldSortDirection current sort direction\n         */\n        const getSortDirection = (oldSortDirection: SortDirection): SortDirection => {\n            return oldSortDirection === SortDirection.ASC ? SortDirection.DESC : SortDirection.ASC;\n        };\n\n        /** on column sort */\n        const onSort = React.useCallback(() => {\n            const newSortedColumn: SortedColumn =\n                sortedColumn && sortedColumn.accessor === accessor ? { ...sortedColumn, sortDirection: getSortDirection(sortedColumn.sortDirection) } : { accessor, sortDirection: SortDirection.DESC };\n            context.setTableState({ ...context.tableState, sortedColumn: newSortedColumn });\n            !!newSortedColumn && context.onSort(newSortedColumn);\n        }, [sortedColumn, context]);\n\n        React.useEffect(() => {\n            setSortable(!disableSort && !!context.onSort);\n        }, [disableSort, context.onSort]);\n\n        React.useEffect(() => {\n            setSortedColumn(context.tableState.sortedColumn);\n        }, [context.tableState.sortedColumn]);\n\n        React.useEffect(() => {\n            if (sortDirection && context.onSort) {\n                context.setTableState({ ...context.tableState, sortedColumn: { accessor, sortDirection } });\n            }\n        }, [sortDirection, context.onSort]);\n\n        React.useEffect(() => {\n            setSortOrder(sortable && sortedColumn?.accessor === accessor ? sortedColumn?.sortDirection : null);\n        }, [sortable, sortedColumn]);\n\n        return (\n            <th\n                {...props}\n                className={classnames(className, { sort: sortable, \"sort-asc\": sortable && sortOrder === SortDirection.ASC, \"sort-desc\": sortable && sortOrder === SortDirection.DESC })}\n                onClick={sortable ? onSort : onClick}\n                ref={ref}\n            />\n        );\n    }\n);\n\nTableHeaderCell.displayName = \"TableHeaderCell\";\n\nexport { TableHeaderCell };\n","import React from \"react\";\nimport { TableRowProps } from \"./TableRow\";\n\nexport type TableHeaderProps = JSX.IntrinsicElements[\"thead\"];\n\nconst TableHeader: React.FC<TableHeaderProps> = React.forwardRef(({ ...props }: TableHeaderProps, ref: React.ForwardedRef<HTMLTableSectionElement>) => {\n    return (\n        <thead {...props} ref={ref}>\n            {React.Children.count(props.children) === 1 && React.isValidElement<TableRowProps>(props.children)\n                ? React.cloneElement<any>(props.children, { isHeaderRow: true, index: -1 })\n                : React.Children.map(props.children, (Child: React.ReactElement<any>, i: number) => {\n                      return React.isValidElement<TableRowProps>(Child) && (Child?.type as any)?.displayName === \"TableRow\"\n                          ? React.cloneElement<any>(Child, {\n                                index: i,\n                                hideSelect: !Child.props.isHeaderRow,\n                            })\n                          : Child;\n                  })}\n        </thead>\n    );\n});\n\nTableHeader.displayName = \"TableHeader\";\n\nexport { TableHeader };\n","import React from \"react\";\nimport { TableRowProps } from \"./TableRow\";\n\nexport type TableBodyProps = JSX.IntrinsicElements[\"tbody\"];\n\nconst TableBody: React.FC<TableBodyProps> = React.forwardRef(({ ...props }: TableBodyProps, ref: React.ForwardedRef<HTMLTableSectionElement>) => {\n    let parentKey: string;\n\n    /**\n     * clone table row by appending parent key to sub row if necessary\n     * @param Child react element\n     * @param index index number\n     */\n    const cloneTableRow = React.useCallback((Child: React.ReactElement<any>, index: number) => {\n        const isTableRow: boolean = React.isValidElement<React.FC<TableRowProps>>(Child) && (Child?.type as any)?.displayName === \"TableRow\";\n        if (isTableRow && !Child.props.isSubRow) {\n            parentKey = Child.props.uniqueKey;\n        }\n        return isTableRow ? React.cloneElement<any>(Child, { index, parentKey }) : Child;\n    }, []);\n\n    return (\n        <tbody {...props} ref={ref}>\n            {React.Children.map(props.children, (Child: React.ReactElement<any>, i: number) => {\n                if (Child?.type === React.Fragment) {\n                    return React.cloneElement<any>(Child, {\n                        children: React.Children.map(Child.props.children, (FragmentChild: React.ReactElement<any>, fragmentIndex: number) => cloneTableRow(FragmentChild, fragmentIndex)),\n                    });\n                } else {\n                    return cloneTableRow(Child, i);\n                }\n            })}\n        </tbody>\n    );\n});\n\nTableBody.displayName = \"TableBody\";\n\nexport { TableBody };\n","import React from \"react\";\n\nexport type TableCellProps<T = any> = JSX.IntrinsicElements[\"td\"];\n\nconst TableCell: React.FC<TableCellProps> = React.forwardRef(({ ...props }: TableCellProps, ref: React.ForwardedRef<HTMLTableCellElement>) => {\n    return <td {...props} ref={ref} />;\n});\n\nTableCell.displayName = \"TableCell\";\n\nexport { TableCell };\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Checkbox } from \"../../Checkbox\";\nimport { TableContext } from \"../TableContextProvider\";\nimport { TableHeaderCell, TableHeaderCellProps } from \"./TableHeaderCell\";\nimport { TableCell, TableCellProps } from \"./TableCell\";\nimport { randomId } from \"@sebgroup/frontend-tools/randomId\";\n\nexport type TableRowProps<T = any> = JSX.IntrinsicElements[\"tr\"] & {\n    checked?: boolean;\n    indeterminate?: boolean;\n    isHeaderRow?: boolean;\n    hideSelect?: boolean;\n    uniqueKey?: string;\n    parentKey?: string;\n    isExpanded?: boolean;\n    isSubRow?: boolean;\n    collapseButtonProps?: JSX.IntrinsicElements[\"button\"];\n    checkboxProps?: JSX.IntrinsicElements[\"input\"];\n};\n\nconst angleDown: JSX.Element = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 512\">\n        <path d=\"M119.5 326.9L3.5 209.1c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0L128 287.3l100.4-102.2c4.7-4.7 12.3-4.7 17 0l7.1 7.1c4.7 4.7 4.7 12.3 0 17L136.5 327c-4.7 4.6-12.3 4.6-17-.1z\" />\n    </svg>\n);\nconst angleRightIcon: JSX.Element = (\n    <svg name=\"angle-right\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\">\n        <path d=\"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z\" />\n    </svg>\n);\n\nconst TableRow: React.FC<TableRowProps> = React.forwardRef(\n    (\n        {\n            className,\n            isHeaderRow,\n            hideSelect,\n            uniqueKey,\n            parentKey,\n            checked = false,\n            indeterminate = false,\n            isSubRow = false,\n            isExpanded = false,\n            checkboxProps = {},\n            collapseButtonProps = {},\n            ...props\n        }: TableRowProps,\n        ref: React.ForwardedRef<HTMLTableRowElement>\n    ) => {\n        const context = React.useContext(TableContext);\n        const [uniqueId, setUniqueId] = React.useState<string>(uniqueKey);\n        const [isShown, setIsShown] = React.useState<boolean>(false);\n        const [expanded, setExpanded] = React.useState<boolean>(isExpanded);\n        const [isParentRow, setIsParentRow] = React.useState<boolean>(isExpanded);\n        const [columnProps, setColumnProps] = React.useState<TableHeaderCellProps | TableCellProps>(null);\n        const [expandedRows, setExpandedRows] = React.useState<Array<string>>(context.tableState?.expandedRows || []);\n\n        /** initiate default expanded row */\n        const initiateExpandedRows = React.useCallback(() => {\n            const newExpandedRows: Array<string> = [...expandedRows];\n            const expandedIndex: number = newExpandedRows.indexOf(uniqueId);\n            if (isExpanded && expandedIndex === -1) {\n                newExpandedRows.push(uniqueId);\n            } else if (expandedIndex > -1) {\n                const expandedIndex: number = newExpandedRows.indexOf(uniqueId);\n                newExpandedRows.splice(expandedIndex, 1);\n            }\n            context.setTableState({ ...context.tableState, expandedRows: newExpandedRows });\n            setExpandedRows(newExpandedRows);\n        }, [isExpanded, uniqueId]);\n\n        React.useEffect(() => {\n            setUniqueId(isHeaderRow ? \"all\" : uniqueKey || randomId(\"table-row\"));\n        }, [uniqueKey, isHeaderRow]);\n\n        React.useEffect(() => {\n            setExpandedRows(context.tableState.expandedRows || []);\n        }, [context.tableState.expandedRows]);\n\n        React.useEffect(() => {\n            setExpanded(isExpanded);\n            if (!isSubRow && !isHeaderRow && context.onRowExpand) {\n                initiateExpandedRows();\n            }\n        }, [isExpanded, initiateExpandedRows]);\n\n        React.useEffect(() => {\n            setColumnProps(isHeaderRow ? { disableSort: true } : null);\n        }, [isHeaderRow]);\n\n        React.useEffect(() => {\n            setIsParentRow(!(isHeaderRow || isSubRow));\n        }, [isHeaderRow, isSubRow]);\n\n        React.useEffect(() => {\n            if (context.onRowExpand) {\n                setIsShown(isSubRow && expandedRows.indexOf(parentKey) > -1);\n            }\n        }, [expandedRows]);\n\n        const Cell: React.FC<TableHeaderCellProps | TableCellProps> = isHeaderRow ? TableHeaderCell : TableCell;\n\n        return (\n            <tr {...props} ref={ref} className={classnames(className, { \"sub-row\": isSubRow, expanded: isExpanded, collapsible: isParentRow && !!context.onRowExpand, show: isShown })}>\n                {!!context.onRowExpand && (\n                    <Cell {...columnProps} className={classnames({ \"collapse-control\": isParentRow })}>\n                        {isParentRow && (\n                            <button {...collapseButtonProps} className={classnames(\"btn btn-sm\", collapseButtonProps.className)} onClick={() => context.onRowExpand(!isExpanded, uniqueId)}>\n                                <div className=\"icon-holder\">{expanded ? angleDown : angleRightIcon}</div>\n                            </button>\n                        )}\n                    </Cell>\n                )}\n                {!!context.onRowSelect && (\n                    <Cell {...columnProps} className={classnames({ \"select-control\": !(hideSelect || isSubRow) })}>\n                        {!(hideSelect || isSubRow) && (\n                            <Checkbox\n                                {...checkboxProps}\n                                checked={checked}\n                                ref={(input: HTMLInputElement) => {\n                                    if (input) {\n                                        input.indeterminate = indeterminate && !checked;\n                                    }\n                                }}\n                                name={`tb_checkbox_${uniqueId}`}\n                                id={`tb_checkbox_${uniqueId}`}\n                                onChange={(event: React.ChangeEvent<HTMLInputElement>) => context.onRowSelect(event, uniqueId)}\n                            />\n                        )}\n                    </Cell>\n                )}\n                {props.children}\n            </tr>\n        );\n    }\n);\n\nTableRow.displayName = \"TableRow\";\n\nexport { TableRow };\n","import { FilterColumn, GenericTableRow, SortDirection } from \"../table-typings\";\n\n/**\n * sum the total of columns or cols in a row\n * @param colsLength the length of the columns\n * @param useSelection add a column for selection checkboxes\n * @param useShowActionColumn add another column for action columns\n * @param useGroupBy add another columns for groupby\n */\nexport function sumCols(colsLength: number, useSelection?: boolean, useShowActionColumn?: boolean, useGroupBy?: boolean): number {\n    let sum = colsLength;\n\n    if (useSelection) {\n        sum = sum + 1;\n    }\n\n    if (useGroupBy) {\n        sum = sum + 1;\n    }\n    if (useShowActionColumn) {\n        sum = sum + 1;\n    }\n\n    return sum;\n}\n\n/**\n * sort array of tabke rows\n * @param items table rows array\n * @param columnName the target column name\n * @param sortDirection the sort direction\n * @return Array of tableRow\n */\nexport function sortArray<T = any>(items: Array<T> = [], columnName: keyof T, sortDirection: SortDirection): Array<T> {\n    const languages: Readonly<Array<string>> = window.navigator?.languages || [\"sw\", \"en\"];\n\n    const sortedItems: Array<any> = [...items].sort((firstItem: T, secondItem: T) => {\n        let result: number = 0;\n        if (sortDirection === SortDirection.ASC) {\n            if (isNaN(secondItem[columnName as string]) && isNaN(firstItem[columnName as string])) {\n                result = String(firstItem[columnName as string]).localeCompare(String(secondItem[columnName as string]), languages as Array<string>, { sensitivity: \"base\", ignorePunctuation: true });\n            } else {\n                result = firstItem[columnName as string] - secondItem[columnName as string];\n            }\n        } else {\n            if (isNaN(secondItem[columnName as string]) && isNaN(firstItem[columnName as string])) {\n                result = String(secondItem[columnName as string]).localeCompare(String(firstItem[columnName as string]), languages as Array<string>, { sensitivity: \"base\", ignorePunctuation: true });\n            } else {\n                result = secondItem[columnName as string] - firstItem[columnName as string];\n            }\n        }\n        return result;\n    });\n    return sortedItems;\n}\n\n/**\n *\n * @param data table data\n * @param filterColumns filter columns\n */\nexport function filterArrayByColumns<T = any>(data: Array<T>, filterColumns: Array<FilterColumn<T>>): Array<T> {\n    return data.filter((row: T) => {\n        return (\n            filterColumns.length === 0 ||\n            filterColumns.every((column: FilterColumn) => {\n                return Array.isArray(column.value) ? column.value.length === 0 || column.value.indexOf(row[column.accessor]) > -1 : row[column.accessor] === column.value;\n            })\n        );\n    });\n}\n\n/**\n * search text in array of table row\n * @param data the array of table rows\n * @param keyword The keyword to search in the array\n * @param searchFields the target field to search\n */\nexport function searchTextByColumns<T = any>(data: Array<T>, keyword: string, searchFields: Array<keyof T>): Array<T> {\n    return [...data].filter((row: T) => {\n        const searchText: string = String(keyword);\n\n        return searchFields?.some((searchColumn: keyof T) => {\n            let result: boolean = false;\n            const searchField: string = searchColumn as string;\n            const regEx: RegExp = new RegExp(searchText, \"gi\");\n            if (row[searchField] === null || row[searchField] === undefined) {\n                result = false;\n            } else if (typeof row[searchField] === \"string\") {\n                result = row[searchField].search(regEx) > -1;\n            } else if (typeof row[searchField] === \"number\") {\n                result = String(row[searchField]).search(regEx) !== -1;\n            }\n            return result;\n        });\n    });\n}\n\n/**\n * paginate data\n * @param data table data\n * @param offset page size\n * @param currentPage current page index\n */\nexport function paginate<T = any>(data: Array<T>, offset: number, currentPage: number) {\n    if (offset && data?.length > 0) {\n        const start: number = currentPage * offset;\n        const end: number = offset + start;\n\n        const currentPageData: Array<T> = data?.slice(start, end);\n        return currentPageData;\n    }\n    return data;\n}\n\nexport interface RowSelectOutput<T = any> {\n    data: Array<GenericTableRow<T>>;\n    isAllSelected: boolean;\n    isIndeterminate: boolean;\n}\n\n/**\n * on row select\n * @param event input event\n * @param data rows of data\n * @param rowUniqueAccessor row unique accessor\n * @param rowId row id value\n */\nexport function onRowSelect<T = any>(event: React.ChangeEvent<HTMLInputElement>, data: Array<GenericTableRow<T>>, rowUniqueAccessor: keyof GenericTableRow<T>, rowId: string): RowSelectOutput {\n    const target: HTMLInputElement = event.target;\n    let isAllSelected: boolean = true;\n    let isIndeterminate: boolean = false;\n    const newData: Array<GenericTableRow<T>> = data?.map((row: GenericTableRow<T>) => {\n        if (row[rowUniqueAccessor] === rowId || rowId === \"all\") {\n            row.checked = target.checked;\n        }\n        isAllSelected = isAllSelected && row.checked;\n        isIndeterminate = isIndeterminate || row.checked;\n        return row;\n    });\n    return {\n        data: newData,\n        isAllSelected: !!newData && isAllSelected,\n        isIndeterminate: isIndeterminate && !isAllSelected,\n    };\n}\n","export enum SortDirection {\n    ASC = \"ASC\",\n    DESC = \"DESC\",\n}\n\nexport interface FilterColumn<T = any> {\n    accessor: keyof T;\n    value: any;\n}\n\nexport type GenericTableRow<T = any> = T & {\n    id?: string;\n    checked?: boolean;\n    expanded?: boolean;\n    indeterminate?: boolean;\n};\n"],"names":["DynamicForms","React","className","role","language","Component","ComponentConditionalRender","FormWithErrors","style","color","renderForm","useDynamicForm","title","key","items","label","controlType","placeholder","initialValue","hasTruthyValue","meta","setHidden","useEffect","description","value","state","section","field","setIndicator","indicator","type","message","length","defaultContext","tableState","sortedColumn","expandedRows","setTableState","onRowSelect","onRowExpand","onSort","TableContext","Table","ref","theme","props","Provider","classnames","TableHeaderCell","accessor","disableSort","sortDirection","onClick","context","setSortedColumn","SortDirection","sortOrder","setSortOrder","sortable","setSortable","oldSortDirection","newSortedColumn","sort","displayName","TableHeader","children","isHeaderRow","index","Child","i","hideSelect","TableBody","parentKey","cloneTableRow","isTableRow","isSubRow","uniqueKey","FragmentChild","fragmentIndex","TableCell","angleDown","xmlns","viewBox","d","angleRightIcon","name","TableRow","checked","indeterminate","isExpanded","checkboxProps","collapseButtonProps","uniqueId","setUniqueId","isShown","setIsShown","expanded","setExpanded","isParentRow","setIsParentRow","columnProps","setColumnProps","setExpandedRows","initiateExpandedRows","newExpandedRows","expandedIndex","indexOf","push","splice","randomId","Cell","collapsible","show","Checkbox","input","id","onChange","event","sortArray","columnName","languages","window","navigator","firstItem","secondItem","isNaN","String","localeCompare","sensitivity","ignorePunctuation","filterArrayByColumns","data","filterColumns","filter","row","every","column","Array","isArray","searchTextByColumns","keyword","searchFields","searchText","some","searchColumn","result","searchField","regEx","RegExp","undefined","search","paginate","offset","currentPage","start","end","slice","rowUniqueAccessor","rowId","target","isAllSelected","isIndeterminate","newData","map"],"sourceRoot":""}